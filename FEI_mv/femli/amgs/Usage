/*BHEADER**********************************************************************
 * Copyright (c) 2007,  Lawrence Livermore National Security, LLC.
 * Produced at the Lawrence Livermore National Laboratory.
 * Written by the HYPRE team. UCRL-CODE-222953.
 * All rights reserved.
 *
 * This file is part of HYPRE (see http://www.llnl.gov/CASC/hypre/).
 * Please see the COPYRIGHT_and_LICENSE file for the copyright notice, 
 * disclaimer, contact information and the GNU Lesser General Public License.
 *
 * HYPRE is free software; you can redistribute it and/or modify it under the 
 * terms of the GNU General Public License (as published by the Free Software
 * Foundation) version 2.1 dated February 1999.
 *
 * HYPRE is distributed in the hope that it will be useful, but WITHOUT ANY 
 * WARRANTY; without even the IMPLIED WARRANTY OF MERCHANTABILITY or FITNESS 
 * FOR A PARTICULAR PURPOSE.  See the terms and conditions of the GNU General
 * Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 * $Revision$
 ***********************************************************************EHEADER*/


To create the smoothed aggregation or Ruge Stuben AMG methods,

1. instantiate the method (create smoothed aggregation AMG context)

   method = MLI_Method_CreateFromName( methodName, comm );
  
   where
      name = "AMGSA", "AMGRS", .. 
      comm = a MPI communicator

   or

   method = MLI_Method_CreateFromID( methodID, comm );

2. set the desired AMG parameters 

   method->setParams( param_string, argc, argv );

   param_string is one of : ( <d> - integer, <f> - floating point )
 
      setOutputLevel <d>
      setNumLevels <d>
      setCoarsenScheme <local>
      setMinCoarseSize <d>
      setStrengthThreshold <f?
      setPweight <f>
      setCalcSpectralNorm 
      setCalibrationSize <d>
      setPreSmoother  <Jacobi,GS,SGS,Schwarz,MLS,ParaSails>
      setPostSmoother <Jacobi,GS,SGS,Schwarz,MLS,ParaSails>
         argc = 2
         argv[0] = nsweeps
         argv[1] = weights
      setCoarseSolver <Jacobi,GS,SGS,Schwarz,ParaSails,SuperLU>
         argc = 2 (0 for SuperLU)
         argv[0] = nsweeps
         argv[1] = weights
      setNullSpace
         argc = 4;
         argv[0] = node degree of freedom\n";
         argv[1] = number of null space vectors\n";
         argv[2] = null space information\n";
         argv[3] = vector length\n";
      setNodalCoord
         argc = 3 (or 4 if matrix has been scaled);
         argv[0] = number of nodes
         argv[1] = node degree of freedom
         argv[2] = coordinates
         argv[3] = scalings 
      print

3. set up the grid hierarchy

   method->setup(mli);

4. to solve, call mli->solve

