/*BHEADER**********************************************************************
 * (c) 1998   The Regents of the University of California
 *
 * See the file COPYRIGHT_and_DISCLAIMER for a complete copyright
 * notice, contact person, and disclaimer.
 *
 * $Revision$
 *********************************************************************EHEADER*/

#ifndef hypre_AMG_DATA_HEADER
#define hypre_AMG_DATA_HEADER

/*--------------------------------------------------------------------------
 * hypre_AMGData
 *--------------------------------------------------------------------------*/

typedef struct
{

   /* setup params */
   int      max_levels;
   double   strong_threshold;
   int      interp_type;

   /* solve params */
   int      max_iter;
   int      cycle_type;    
   int     *num_grid_sweeps;  
   int     *grid_relax_type;   
   int     *grid_relax_points[4]; 
   double   tol;

   /* problem data */
   hypre_CSRMatrix  *A;
   int      num_variables;
   int      num_unknowns;
   int      num_points;
   int     *unknown_map;
   int     *point_map;
   int     *v_at_point;           

   /* data generated in the setup phase */
   hypre_CSRMatrix **A_array;
   hypre_CSRMatrix **P_array;
   int             **CF_marker_array;
   int             **unknown_map_array;
   int             **point_map_array;
   int             **v_at_point_array;
   int               num_levels;

   /* data generated in the solve phase */
   hypre_Vector   *Vtemp;
   double   *vtmp;
   int       cycle_op_count;                                                   

   /* output params */
   int      ioutdat;
   char     log_file_name[256];

} hypre_AMGData;

/*--------------------------------------------------------------------------
 * Accessor functions for the hypre_AMGData structure
 *--------------------------------------------------------------------------*/

/* setup params */
		  		      
#define hypre_AMGDataMaxLevels(amg_data) ((amg_data)->max_levels)
#define hypre_AMGDataStrongThreshold(amg_data) ((amg_data)->strong_threshold)
#define hypre_AMGDataInterpType(amg_data) ((amg_data)->interp_type)

/* solve params */

#define hypre_AMGDataMaxIter(amg_data) ((amg_data)->max_iter)
#define hypre_AMGDataCycleType(amg_data) ((amg_data)->cycle_type)
#define hypre_AMGDataTol(amg_data) ((amg_data)->tol)
#define hypre_AMGDataNumGridSweeps(amg_data) ((amg_data)->num_grid_sweeps)
#define hypre_AMGDataGridRelaxType(amg_data) ((amg_data)->grid_relax_type)
#define hypre_AMGDataGridRelaxPoints(amg_data) ((amg_data)->grid_relax_points)

/* problem data parameters */
#define  hypre_AMGDataNumVariables(amg_data)  ((amg_data)->num_variables)
#define hypre_AMGDataNumUnknowns(amg_data) ((amg_data)->num_unknowns)
#define hypre_AMGDataNumPoints(amg_data) ((amg_data)->num_points)
#define hypre_AMGDataUnknownMap(amg_data) ((amg_data)->unknown_map)
#define hypre_AMGDataPointMap(amg_data) ((amg_data)->point_map)
#define hypre_AMGDataVatPoint(amg_data) ((amg_data)->v_at_point)

/* data generated by the setup phase */
#define hypre_AMGDataCFMarkerArray(amg_data) ((amg_data)-> CF_marker_array)
#define hypre_AMGDataAArray(amg_data) ((amg_data)->A_array)
#define hypre_AMGDataPArray(amg_data) ((amg_data)->P_array)
#define hypre_AMGDataUnknownMapArray(amg_data) ((amg_data)->unknown_map_array) 
#define hypre_AMGDataPointMapArray(amg_data) ((amg_data)->point_map_array) 
#define hypre_AMGDataVatPointArray(amg_data) ((amg_data)->v_at_point_array)
#define hypre_AMGDataNumLevels(amg_data) ((amg_data)->num_levels)				      
/* data generated in the solve phase */
#define hypre_AMGDataVtemp(amg_data) ((amg_data)->Vtemp)
#define hypre_AMGDataCycleOpCount(amg_data) ((amg_data)->cycle_op_count)

/* output parameters */
#define hypre_AMGDataIOutDat(amg_data) ((amg_data)->ioutdat)
#define hypre_AMGDataLogFileName(amg_data) ((amg_data)->log_file_name)

#endif



