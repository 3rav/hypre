/** @name	Installation Procedures


   		 Using Autoconfig in hypre
   		 -------------------------

NOTE: These procedures currently only apply to the following directories:

  utilities
\newline
  struct_matrix_vector
\newline
  struct_linear_solvers
\newline
  test
\newline

In the top level linear_solvers directory type 'autoconf'.  This will use the file, configure.in, to create the file, configure.  This step only needs to be done when configure.in is changed.  

To automatically generate machine specific makefiles, type `configure'
in the `linear_solvers' directory.  The configure script is a portable
script generated by GNU Autoconf.  It runs a series of tests to
determine characteristics of the machine on which it is running, and
it uses the results of the these tests to produce the machine specific
makefiles, called `Makefile', from template files called `Makefile.in'
in each directory.  Once the makefiles are produced you can run make
as you would with any other makefile.

The configure script produces a file called `config.cache' which
stores some of its results.  If you wish to run configure again in a
way that will get different results, you should remove `config.cache'.

This configure script primarily does the following things:

  - selects a C compiler
  - provides either optimization or debugging options for the C compiler
  - finds the headers and libraries for MPI

The configure script has some command-line options that can give you
some control over the choices it will make.  You can type

  configure --help

to see the list of all of the command-line options to configure, but
the most significant options are at the bottom of the list, after the
line that reads "--enable and --with options recognized:"

--with-CC=ARG		
			This option allows you to choose the C compiler
			you wish to use.  The default compiler that
			configure chooses is gcc, if it is available.

--enable-opt-debug=ARG  
			Choose whether you want the C compiler to have
			optimization or debugging flags.  For debugging,
			replace `ARG' with `debug'.  For optimization,
			replace `ARG' with `opt'.  If you want both sets
			of flags, replace `ARG' with `both'.  The default
			is optimization

--without-MPI		
			This flag suppresses the use of MPI.  It produces
			makefiles that serve the same purpose as the
			files `Makefile.seq'

--with-mpi-include=DIR
--with-mpi-libs=LIBS
--with-mpi-lib-dirs=DIRS
			These three flags are to be used if you want to
			override the automatic search for MPI.  If you use
			one of these flags, you must use all three.
			Replace `DIR' with the path of the directory that
			contains mpi.h, replace `LIBS' with a list of the
			stub names of all the libraries needed for MPI, and
			replace `DIRS' with a list of the directory paths
			containing the libraries specified by `LIBS'
			NOTE:  The lists `LIBS' and `DIRS' should be
			space-separated and contained in quotes, e.g.
			--with-mpi-libs="nsl socket mpi" and
			--with-mpi-lib-dirs="/usr/lib /usr/local/mpi/lib"

--with-mpi-flags=FLAGS	
			Sometimes other compiler flags are needed for
			certain MPI implementations to work.  Replace
			`FLAGS' with a space-separated list of whatever
			flags are necessary.  This option does not
			override the automatic search for MPI.  It can be
			used to add to the results of the automatic search,
			or it can be used along with the three previous
			flags.

--with-MPICC=ARG	
			The automatic search for the MPI stuff is based on
			a tool such as `mpicc' that configure finds in
			your $PATH.  If there is an implementation of MPI
			that you wish to use, you can replace `ARG' with
			the name of that MPI version's C compiler wrapper,
			if it has one.  (MPICH has mpicc, IBM MPI has
			mpcc, other MPIs use other names.)  configure will
			then automatically find the necessary libraries
			and headers.




    Instructions for updating and maintaining installations of hypre

----------------------------------------------------------------------------

GENERAL COMMENTS:

There are two types of hypre installations that are updated and
maintained by members of the Scalable Linear Solvers project:

  1. The "internal" installation:

    - intended to give users access to relatively recent changes.
    - updated somewhat frequently (about once a week).
    - may be relatively unstable.
    - one old installation is retained.
    - installed on:
        CASC Sun workstation cluster

  2. The "external" installation:

    - intended to give users consistent access across several platforms.
    - updated less frequently than internal installation.
    - should be relatively stable.
    - a few old installations are retained.
    - installed on:
        CASC Sun workstation cluster
        Compass DEC cluster
        Blue-Pacific
        Forest DEC cluster  (classified)
        Blue(Sky)-Pacific   (classified)

Rob Falgout is maintaining two lists of users who want to receive
notification of installation updates: one for "internal" updates and
one for "external" updates.  Users should send email to Rob at
rfalgout@llnl.gov to get on either list.

----------------------------------------------------------------------------

INSTALLATION PROCEDURES:

All installations are done with the `update' Bourne-shell script
located in the top-level directory of the hypre repository.  To
get general usage info, do `update -help'.

Internal installation:

  (on CASC cluster only)

  1. Do `update internal' - this checks out the current version of the
     repository, tags it with a date (file `VERSION_DATE'), compiles it,
     temporarily installs it, and sets the permissions of the temporary
     installation to appropriate values.  This also creates the tar file
     `UPDATE.tar', currently only used in the external installation.

  2. Do `update internal install' - this saves the previously
     installed version, moves the temporary installation into its
     correct location, and possibly deletes some older installations.

     Note that step 1 is not actually needed, but is recommended in case
     something doesn't work as planned (e.g., failed checkout, failed
     compile, ...).  Also, step 1 provides the opportunity to test the
     library in non-CASC codes such as ARES or ALE3D via the temporary
     installation in the `UPDATE' subdirectory.

  3. Send email to appropriate users indicating the update.

External installation:

  (on CASC cluster)

  1. Do `update external'
  2. Do `update external install'

  (on all other supported machines, e.g. the Compass cluster)

  1. FTP the file `UPDATE.tar' to west (for example), and put it
     in the install directory (do `update -dirs' for a list).
  2. Do `tar xf UPDATE.tar'
  3. Do `update external -dec '
  4. Do `update external -dec install'

----------------------------------------------------------------------------

*/

