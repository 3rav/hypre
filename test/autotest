#!/bin/sh
#BHEADER***********************************************************************
# (c) 1998   The Regents of the University of California
#
# See the file COPYRIGHT_and_DISCLAIMER for a complete copyright
# notice, contact person, and disclaimer.
#
# $Revision$
#EHEADER***********************************************************************

#==============================================================================
# Environment variables
# NOTE: this should be stripped down to something more minimal
#==============================================================================

CVSROOT=/home/casc/repository
export CVSROOT

PATH=/home/casc/bin:\
/opt/SUNWspro/bin:/usr/ccs/bin:/usr/local/bin:\
/usr/sbin:/usr/bin:/usr/ucb:\
/sbin/bin:\
/usr/local/scripts:\
/usr/local/mpi/mpich/bin
export PATH

#==============================================================================
# Set autotest directory (assumes CASC cluster)
#==============================================================================

HYPRE_AUTOTEST_DIR="/home/casc/software/hypre/autotest"

#=============================================================================
# Check out the repository in the HYPRE_AUTOTEST_DIR directory
#=============================================================================

if [ ! -d "$CVSROOT" ]
then    echo "Error: no CVS repository, CVSROOT = $CVSROOT"
    exit
fi

cd $HYPRE_AUTOTEST_DIR
rm -fR linear_solvers
cvs checkout -P linear_solvers 1> $0.checkout.log 2> $0.checkout.err
echo "dwalker@llnl.gov rfalgout@llnl.gov" > $0.checkout.err.email 

#=============================================================================
# Make libraries and test drivers (using configure)
#=============================================================================

cd $HYPRE_AUTOTEST_DIR/linear_solvers
rm config.cache
./configure 1> $0.configure.log 2> $0.configure.err
echo "dwalker@llnl.gov rfalgout@llnl.gov elliott22@llnl.gov" > $0.configure.err.email 

make veryclean

make struct 1> $0.struct.log 2> $0.struct.err
echo "dwalker@llnl.gov rfalgout@llnl.gov jones97@llnl.gov" > $0.struct.err.email 

make

make parcsr 1> $0.parcsr.log 2> $0.parcsr.err
echo "dwalker@llnl.gov rfalgout@llnl.gov yang11@llnl.gov vhenson@llnl.gov" > $0.parcsr.err.email 

#make ci_struct 1> $0.ci_struct.log 2> $0.ci_struct.err
#echo "dwalker@llnl.gov rfalgout@llnl.gov cleary1@llnl.gov" > $0.ci_struct.err.email 

make seq 1> $0.seq.log 2> $0.seq.err
echo "dwalker@llnl.gov rfalgout@llnl.gov yang11@llnl.gov vhenson@llnl.gov" > $0.seq.err.email 

make beta

# make documentation
(cd docs; make)

#==============================
# Run test suites
#==============================

cd $HYPRE_AUTOTEST_DIR/linear_solvers/test
./test_drivers.sh -mail

#==============================
# Make C++ test drivers
#==============================

cd $HYPRE_AUTOTEST_DIR/linear_solvers/test
make all++ 1> $0.all++.log 2> $0.all++.err
echo "dwalker@llnl.gov rfalgout@llnl.gov" > $0.all++.err.email 
cd $HYPRE_AUTOTEST_DIR/linear_solvers/test
make beta++ 1> $0.beta++.log 2> $0.beta++.err
echo "dwalker@llnl.gov rfalgout@llnl.gov" > $0.beta++.err.email 

#==============================
# Run test suites
#==============================

#cd $HYPRE_AUTOTEST_DIR/linear_solvers/test
#./test_drivers.sh -mail

#=============================================================================
# Make libraries and test drivers (using configure--with-pthreads)
#=============================================================================

cd $HYPRE_AUTOTEST_DIR/linear_solvers
rm config.cache
./configure --with-pthreads 1> $0.configure_threads.log 2> $0.configure_threads.err
echo "dwalker@llnl.gov rfalgout@llnl.gov elliott22@llnl.gov" > $0.configure_threads.err.email 

make veryclean

make struct 1> $0.struct_threads.log 2> $0.struct_threads.err
echo "dwalker@llnl.gov rfalgout@llnl.gov jones97@llnl.gov elliott22@llnl.gov" > $0.struct_threads.err.email 

make

make parcsr 1> $0.parcsr_threads.log 2> $0.parcsr_threads.err
echo "dwalker@llnl.gov rfalgout@llnl.gov yang11@llnl.gov vhenson@llnl.gov" > $0.parcsr_threads.err.email 

#make ci_struct 1> $0.ci_struct_threads.log 2> $0.ci_struct_threads.err
#echo "dwalker@llnl.gov rfalgout@llnl.gov cleary1@llnl.gov" > $0.ci_struct_threads.err.email 

make seq 1> $0.seq_threads.log 2> $0.seq_threads.err
echo "dwalker@llnl.gov rfalgout@llnl.gov yang11@llnl.gov vhenson@llnl.gov" > $0.seq_threads.err.email 

make beta

#==============================
# Run test suites
#==============================

#cd $HYPRE_AUTOTEST_DIR/linear_solvers/test
#./test_drivers.sh -mail

#=============================================================================
# Make libraries and test drivers (using configure --without_MPI)
#=============================================================================

cd $HYPRE_AUTOTEST_DIR/linear_solvers
rm config.cache
./configure --without-MPI 1> $0.configure_no_mpi.log 2> $0.configure_no_mpi.err
echo "dwalker@llnl.gov rfalgout@llnl.gov elliott22@llnl.gov" > $0.configure_no_mpi.err.email 

make veryclean

make struct 1> $0.struct_no_mpi.log 2> $0.struct_no_mpi.err
echo "dwalker@llnl.gov rfalgout@llnl.gov jones97@llnl.gov" > $0.struct_no_mpi.err.email 

make

make parcsr 1> $0.parcsr_no_mpi.log 2> $0.parcsr_no_mpi.err
echo "dwalker@llnl.gov rfalgout@llnl.gov yang11@llnl.gov vhenson@llnl.gov" > $0.parcsr_no_mpi.err.email 

#make ci_struct 1> $0.ci_struct_no_mpi.log 2> $0.ci_struct_no_mpi.err
#echo "dwalker@llnl.gov rfalgout@llnl.gov cleary1@llnl.gov" > $0.ci_struct_no_mpi.err.email 

make seq 1> $0.seq_no_mpi.log 2> $0.seq_no_mpi.err
echo "dwalker@llnl.gov rfalgout@llnl.gov yang11@llnl.gov vhenson@llnl.gov" > $0.seq_no_mpi.err.email 

make docs

cd $HYPRE_AUTOTEST_DIR/linear_solvers/test
make 1> $0.test_no_mpi.log 2> $0.test_no_mpi.err
echo "dwalker@llnl.gov rfalgout@llnl.gov" > $0.test_no_mpi.err.email 

make beta

#==============================
# Run test suites
#==============================

#cd $HYPRE_AUTOTEST_DIR/linear_solvers/test
#./test_drivers.sh -mail

#=============================================================================
# Clean up
#=============================================================================

cd $HYPRE_AUTOTEST_DIR/linear_solvers
make clean

#==============================================================================
# Set permissions so that all developers can access
#  -- give everyone read and execute permission
#  -- give group write permissions
#==============================================================================

echo "setting permissions...."
chmod -fR a+rX,ug+w $HYPRE_AUTOTEST_DIR

#===========================================================================
# Check for errors and send appropriate email
# NOTE: HYPRE_MAIL must support `-s' subject option
#===========================================================================

    HYPRE_MAIL=/usr/ucb/Mail
    case $HYPRE_ARCH in
	dec)
	    HYPRE_MAIL=/usr/ucb/Mail;;
	blue)
	    HYPRE_MAIL=/usr/ucb/Mail;;
	red)
	    HYPRE_MAIL=/usr/ucb/Mail;;
    esac

for i in *.err 
do 
if [ -s $i ] 
then 
RECIPIENTS=`cat ${i}.email` 
${HYPRE_MAIL} -s "Autotest error(s); see file $i" $RECIPIENTS < $i 
fi 
done 

#==============================================================================
# Run test suites on remote machines
#==============================================================================

cd $HYPRE_AUTOTEST_DIR

while [ "$*" != "" ]
do

case $1 in
    -dec)
        HYPRE_COMPILE_MACHINE="west"
        HYPRE_RUN_MACHINE="west"
        HYPRE_REMOTE_DIR="/usr/apps/hypre/AUTOTEST"
        shift;;
    -blue)
        HYPRE_COMPILE_MACHINE="blue"
        HYPRE_RUN_MACHINE="blue"
        HYPRE_REMOTE_DIR="/usr/apps/hypre/AUTOTEST"
        shift;;
    -red)
        HYPRE_COMPILE_MACHINE="sasn100"
        HYPRE_RUN_MACHINE="janus"
        HYPRE_REMOTE_DIR="/usr/apps/hypre/AUTOTEST"
        shift;;
esac

echo ""
echo "======================================================================"
echo "Running tests on $HYPRE_RUN_MACHINE"
echo "======================================================================"
echo ""

echo "creating new AUTOTEST directory...."
ssh ${HYPRE_COMPILE_MACHINE} "\
    (\
	rm -fR ${HYPRE_REMOTE_DIR};\
	mkdir ${HYPRE_REMOTE_DIR}\
    )"

echo "copying new source...."
scp -r linear_solvers ${HYPRE_COMPILE_MACHINE}:${HYPRE_REMOTE_DIR}

# compile
ssh ${HYPRE_COMPILE_MACHINE} "\
    (\
	cd ${HYPRE_REMOTE_DIR}/linear_solvers;\
	rm config.cache;\
	./configure;\
	make beta;\
    )"

# run test suite
ssh ${HYPRE_RUN_MACHINE} "\
    (\
	cd ${HYPRE_REMOTE_DIR}/linear_solvers/test;\
	./test_drivers.sh -mail\
    )"

echo "cleaning up...."
ssh ${HYPRE_COMPILE_MACHINE} "
    (\
	 rm -fR ${HYPRE_REMOTE_DIR}\
    )"

done
