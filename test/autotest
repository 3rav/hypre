#!/bin/sh
#BHEADER***********************************************************************
# (c) 1998   The Regents of the University of California
#
# See the file COPYRIGHT_and_DISCLAIMER for a complete copyright
# notice, contact person, and disclaimer.
#
# $Revision$
#EHEADER***********************************************************************

#==============================================================================
# Environment variables
# NOTE: this should be stripped down to something more minimal
#==============================================================================

CVSROOT=/home/casc/repository
export CVSROOT

PATH=/home/casc/bin:\
/opt/SUNWspro/bin:/usr/ccs/bin:/usr/local/bin:\
/usr/sbin:/usr/bin:/usr/ucb:\
/sbin/bin:\
/usr/local/scripts:\
/usr/local/mpi/mpich/bin
export PATH

#==============================================================================
# Set autotest directory (assumes CASC cluster)
#==============================================================================

HYPRE_AUTOTEST_DIR="/home/casc/software/hypre/autotest"

#=============================================================================
# Check out the repository in the HYPRE_AUTOTEST_DIR directory
#=============================================================================

if [ ! -d "$CVSROOT" ]
then
    echo "Error: no CVS repository, CVSROOT = $CVSROOT"
    exit
fi

cd $HYPRE_AUTOTEST_DIR
rm -fR linear_solvers
cvs checkout -P linear_solvers 1> $0.checkout.log 2> $0.checkout.err
if [ -s "$0.checkout.err" ]
then
   RECIPIENTS="dwalker@llnl.gov rfalgout@llnl.gov"
   $HYPRE_MAIL -s "Error(s) in checkout" $RECIPIENTS < $0.checkout.err
fi

#=============================================================================
# Make libraries and test drivers (using configure)
#=============================================================================

cd $HYPRE_AUTOTEST_DIR/linear_solvers
rm config.cache
./configure> $0.configure.log 2> $0.configure.err
if [ -s "$0.configure.err" ]
then
   RECIPIENTS="dwalker@llnl.gov rfalgout@llnl.gov elliott22@llnl.gov"
   $HYPRE_MAIL -s "Error(s) in configure" $RECIPIENTS < $0.configure.err
fi

make veryclean

make struct> $0.struct.log 2> $0.struct.err
if [ -s "$0.struct.err" ]
then
   RECIPIENTS="dwalker@llnl.gov rfalgout@llnl.gov jones97@llnl.gov"
   $HYPRE_MAIL -s "Error(s) in make struct" $RECIPIENTS < $0.struct.err
fi

make

make parcsr> $0.parcsr.log 2> $0.parcsr.err
if [ -s "$0.parcsr.err" ]
then
   RECIPIENTS="dwalker@llnl.gov yang11@llnl.gov vhenson@llnl.gov"
   $HYPRE_MAIL -s "Error(s) in make parcsr" $RECIPIENTS < $0.parcsr.err
fi

#make ci_struct> $0.ci_struct.log 2> $0.ci_struct.err
#if [ -s "$0.ci_struct.err" ]
#then
#   RECIPIENTS="dwalker@llnl.gov cleary1@llnl.gov"
#   $HYPRE_MAIL -s "Error(s) in make ci_struct" $RECIPIENTS < $0.ci_struct.err
#fi

make seq> $0.seq.log 2> $0.seq.err
if [ -s "$0.seq.err" ]
then
   RECIPIENTS="dwalker@llnl.gov yang11@llnl.gov vhenson@llnl.gov rfalgout@llnl.gov"
   $HYPRE_MAIL -s "Error(s) in make seq" $RECIPIENTS < $0.seq.err
fi

make beta

# make documentation
(cd docs; make)

#==============================
# Run test suites
#==============================

cd $HYPRE_AUTOTEST_DIR/linear_solvers/test
./test_drivers.sh -mail

#==============================
# Make C++ test drivers
#==============================

(cd test; make all++)
(cd test; make beta++)

#==============================
# Run test suites
#==============================

#cd $HYPRE_AUTOTEST_DIR/linear_solvers/test
#./test_drivers.sh -mail

#=============================================================================
# Make libraries and test drivers (using configure--with-pthreads)
#=============================================================================

cd $HYPRE_AUTOTEST_DIR/linear_solvers
rm config.cache
./configure --with-pthreads> $0.configure_threads.log 2> $0.configure_threads.err
if [ -s "$0.configure_threads.err" ]
then
   RECIPIENTS="dwalker@llnl.gov rfalgout@llnl.gov elliott22@llnl.gov"
   $HYPRE_MAIL -s "Error(s) in configure --with -pthreads" $RECIPIENTS < $0.configure_threads.err
fi

make veryclean

make struct> $0.struct_threads.log 2> $0.struct_threads.err
if [ -s "$0.struct_threads.err" ]
then
   RECIPIENTS="dwalker@llnl.gov rfalgout@llnl.gov jones97@llnl.gov elliott22@llnl.gov"
   $HYPRE_MAIL -s "Error(s) in make struct (with pthreads)" $RECIPIENTS < $0.struct_threads.err
fi

make

make parcsr> $0.parcsr_threads.log 2> $0.parcsr_threads.err
if [ -s "$0.parcsr_threads.err" ]
then
   RECIPIENTS="dwalker@llnl.gov yang11@llnl.gov vhenson@llnl.gov"
   $HYPRE_MAIL -s "Error(s) in make parcsr (with pthreads)" $RECIPIENTS < $0.parcsr_threads.err
fi

#make ci_struct> $0.ci_struct_threads.log 2> $0.ci_struct_threads.err
#if [ -s "$0.parcsr_ci_struct.err" ]
#then
#   RECIPIENTS="dwalker@llnl.gov cleary1@llnl.gov"
#   $HYPRE_MAIL -s "Error(s) in make ci_struct (with pthreads)" $RECIPIENTS < $0.ci_struct_threads.err
#fi

make seq> $0.seq_threads.log 2> $0.seq_threads.err
if [ -s "$0.seq_threads.err" ]
then
   RECIPIENTS="dwalker@llnl.gov yang11@llnl.gov vhenson@llnl.gov rfalgout@llnl.gov"
   $HYPRE_MAIL -s "Error(s) in make seq (with threads)" $RECIPIENTS < $0.seq_threads.err
fi

make beta

#==============================
# Run test suites
#==============================

#cd $HYPRE_AUTOTEST_DIR/linear_solvers/test
#./test_drivers.sh -mail

#=============================================================================
# Make libraries and test drivers (using configure --without_MPI)
#=============================================================================

cd $HYPRE_AUTOTEST_DIR/linear_solvers
rm config.cache
./configure --without-MPI> $0.configure_no_mpi.log 2> $0.configure_no_mpi.err
if [ -s "$0.configure_no_mpi.err" ]
then
   RECIPIENTS="dwalker@llnl.gov rfalgout@llnl.gov elliott22@llnl.gov"
   $HYPRE_MAIL -s "Error(s) in configure --without-MPI" $RECIPIENTS < $0.configure_no_mpi.err
fi

make veryclean

make struct> $0.struct_no_mpi.log 2> $0.struct_no_mpi.err
if [ -s "$0.struct_no_mpi.err" ]
then
   RECIPIENTS="dwalker@llnl.gov rfalgout@llnl.gov jones97@llnl.gov"
   $HYPRE_MAIL -s "Error(s) in make struct without MPI" $RECIPIENTS < $0.struct_no_mpi.err
fi

make

make parcsr> $0.parcsr_no_mpi.log 2> $0.parcsr_no_mpi.err
if [ -s "$0.parcsr_no_mpi.err" ]
then
   RECIPIENTS="dwalker@llnl.gov yang11@llnl.gov vhenson@llnl.gov"
   $HYPRE_MAIL -s "Error(s) in make parcsr without MPI" $RECIPIENTS < $0.parcsr_no_mpi.err
fi


#make ci_struct> $0.ci_struct_no_mpi.log 2> $0.ci_struct_no_mpi.err
#if [ -s "$0.ci_struct_no_mpi.err" ]
#then
#   RECIPIENTS="dwalker@llnl.gov cleary1@llnl.gov"
#   $HYPRE_MAIL -s "Error(s) in make ci_struct without MPI" $RECIPIENTS < $0.ci_struct_no_mpi.err
#fi

make seq> $0.seq_no_mpi.log 2> $0.seq_no_mpi.err
if [ -s "$0.seq_no_mpi.err" ]
then
   RECIPIENTS="dwalker@llnl.gov yang11@llnl.gov vhenson@llnl.gov rfalgout@llnl.gov"
   $HYPRE_MAIL -s "Error(s) in make seq without MPI" $RECIPIENTS < $0.seq_no_mpi.err
fi

make docs

cd $HYPRE_AUTOTEST_DIR/linear_solvers/test
make> $0.test_no_mpi.log 2> $0.test_no_mpi.err
if [ -s "$0.test_no_mpi.err" ]
then
   RECIPIENTS="dwalker@llnl.gov rfalgout@llnl.gov"
   $HYPRE_MAIL -s "Error(s) in make test without MPI" $RECIPIENTS < $0.test_no_mpi.err
fi

make beta

#==============================
# Run test suites
#==============================

#cd $HYPRE_AUTOTEST_DIR/linear_solvers/test
#./test_drivers.sh -mail

#=============================================================================
# Clean up
#=============================================================================

cd $HYPRE_AUTOTEST_DIR/linear_solvers
make clean

#==============================================================================
# Set permissions so that all developers can access
#  -- give everyone read and execute permission
#  -- give group write permissions
#==============================================================================

echo "setting permissions...."
chmod -fR a+rX,ug+w $HYPRE_AUTOTEST_DIR

#==============================================================================
# Run test suites on remote machines
#==============================================================================

cd $HYPRE_AUTOTEST_DIR

while [ "$*" != "" ]
do

case $1 in
    -dec)
        HYPRE_COMPILE_MACHINE="west"
        HYPRE_RUN_MACHINE="west"
        HYPRE_REMOTE_DIR="/usr/apps/hypre/AUTOTEST"
        shift;;
    -blue)
        HYPRE_COMPILE_MACHINE="blue"
        HYPRE_RUN_MACHINE="blue"
        HYPRE_REMOTE_DIR="/usr/apps/hypre/AUTOTEST"
        shift;;
    -red)
        HYPRE_COMPILE_MACHINE="sasn100"
        HYPRE_RUN_MACHINE="janus"
        HYPRE_REMOTE_DIR="/usr/apps/hypre/AUTOTEST"
        shift;;
esac

echo ""
echo "======================================================================"
echo "Running tests on $HYPRE_RUN_MACHINE"
echo "======================================================================"
echo ""

echo "creating new AUTOTEST directory...."
ssh ${HYPRE_COMPILE_MACHINE} "\
    (\
	rm -fR ${HYPRE_REMOTE_DIR};\
	mkdir ${HYPRE_REMOTE_DIR}\
    )"

echo "copying new source...."
scp -r linear_solvers ${HYPRE_COMPILE_MACHINE}:${HYPRE_REMOTE_DIR}

# compile
ssh ${HYPRE_COMPILE_MACHINE} "\
    (\
	cd ${HYPRE_REMOTE_DIR}/linear_solvers;\
	./configure;\
	make beta
    )"

# run test suite
ssh ${HYPRE_RUN_MACHINE} "\
    (\
	cd ${HYPRE_REMOTE_DIR}/linear_solvers/test;\
	./test_drivers.sh -mail\
    )"

echo "cleaning up...."
ssh ${HYPRE_COMPILE_MACHINE} "
    (\
	 rm -fR ${HYPRE_REMOTE_DIR}\
    )"

done
