#!/bin/sh
#BHEADER***********************************************************************
# (c) 1998   The Regents of the University of California
#
# See the file COPYRIGHT_and_DISCLAIMER for a complete copyright
# notice, contact person, and disclaimer.
#
# $Revision$
#EHEADER***********************************************************************

perform_test()
{
  echo ""
  echo "======================================================================"
  echo "Running tests $HYPRE_MACHINE_COMMANDS in directory $HYPRE_REMOTE_DIR"
  echo "======================================================================"
  echo ""

#=============================================================================
#   Running tests on same machine as that executing this script
#   Destroy old directory; copy newly checked out version; cd to
#   HYPRE_REMOTE_DIR and execute tests.
#=============================================================================
  if [ "${HYPRE_COMPILE_MACHINE}" = "`hostname | sed 's/\..*$//'`" ]
  then
     if [ "${HYPRE_REMOTE_DIR}" != "${HYPRE_AUTOTEST_EXECUTE_DIR}" ]
     then
        rm -fR ${HYPRE_REMOTE_DIR}/linear_solvers
        cp -fpr ${HYPRE_AUTOTEST_EXECUTE_DIR}/linear_solvers ${HYPRE_REMOTE_DIR}
     fi
     cd ${HYPRE_REMOTE_DIR}
     [ -f linear_solvers/test/AUTOTEST/env.${HYPRE_ARCH} ] && \
        . linear_solvers/test/AUTOTEST/env.${HYPRE_ARCH} ${COMPILERSELECT}
     linear_solvers/test/AUTOTEST/autotest_test \
         ${HYPRE_MACHINE_COMMANDS} -v ${HYPRE_MESSAGE}

#=============================================================================
#   Running tests on remote machine
#     ssh to compile machine and remove existing linear_solvers directory
#     copy source code from the current directory to defined remote directory
#     ssh to remote machine and execute tests
#=============================================================================
  else
    echo "deleting old AUTOTEST directory...."
    ssh ${HYPRE_COMPILE_MACHINE} "\
    (/bin/sh -c \"\
        rm -fR ${HYPRE_REMOTE_DIR}/linear_solvers;\"\
    )"

    echo "copying new source...."
    cp -fpr linear_solvers ${HYPRE_REMOTE_DIR}

    echo "Begin running remote tests...."
    ssh -f ${HYPRE_COMPILE_MACHINE} "\
    (/bin/sh -c \"\
      cd ${HYPRE_REMOTE_DIR##*:};\
      [ -f linear_solvers/test/AUTOTEST/env.${HYPRE_ARCH} ] && \
        . linear_solvers/test/AUTOTEST/env.${HYPRE_ARCH} ${COMPILERSELECT};\
      linear_solvers/test/AUTOTEST/autotest_test \
            ${HYPRE_MACHINE_COMMANDS} -v ${HYPRE_MESSAGE};\
      chmod -fR a+rX,ug+w,o-w linear_solvers;\
      chgrp -fR hypre linear_solvers\"\
    )" 
  fi
  echo "returning to autotest...."
}


#=============================================================================
# Function for display of help/usage
#=============================================================================
help () {
  printf "Usage: $0 [-nocvs|-rev Rev#] [-h|-help] [-d|-debug] HostOptions [HostOptions ... ]\n"
  printf "\n"
  printf "HYPRE autotest script. This is the high level wrapper for the\n"
  printf "autotest_test script, which is run nightly from cron. This script\n"
  printf "determines which systems autotest_test is to be executed on, and the\n"
  printf "options to use.\n"
  printf "\n"
  printf "%s\n" "-nocvs    Do not checkout the latest source code from CVS.\n"
  printf "                 Use the existing ./linear_solvers/ directory for\n"
  printf "                 testing.\n"
  printf "%s\n" "-rev Rev# Check out the specified revision or tagged source\n" 
  printf "%s\n" "          from CVS.\n" 
  printf "%s\n" "-help     Print this information and exit.\n" 
  printf "%s\n" "-debug    Turn on debug mode.\n" 
  printf "\n"
  printf "HostOptions      Host ID or configuration on which autotest_test is to be run.\n"
  printf "                 Valid host IDs are:\n"
  printf "%s\n" "     -gps       Compaq gps320 system."
  printf "%s\n" "     -gpsmp     Compaq gps320 system executing OpenMP."
  printf "%s\n" "     -ilx       Intel running Linux."
  printf "%s\n" "     -insure    CASC Linux, executing insure++."
  printf "%s\n" "     -mcr       Intel Linux, CHAOS2."
  printf "%s\n" "     -pengra    Intel Linux, CHAOS2."
  printf "%s\n" "     -red       ASCI Red"
  printf "%s\n" "     -tux149    CASC running RedHat Enterprise Linux."
  printf "%s\n" "     -tuxgcc    CASC running latest gcc compilers"
  printf "%s\n" "     -tuxpgi    CASC running latest PGI compilers"
  printf "%s\n" "     -tuxabsoft CASC running Absoft-Pro8.0 Fortran 90"
  printf "%s\n" "     -tuxlahey  CASC running Lahey Fortran compiler"
  printf "%s\n" "     -tuxintel  CASC running latest Intel compilers"
  printf "%s\n" "     -tuxkai    CASC running latest KAI KCC compiler"
  printf "\n"
}


usage ()
{
  printf "Usage: $0 [-nocvs|-rev Rev#] [-h|-help] [-d|-debug] HostOptions [HostOptions ... ]\n"
}


#==============================================================================
#    Sets options for machines on which regression tests are being run
#==============================================================================
hypre_set_machine_options()
{
  case $1 in
     -gps)
        HYPRE_ARCH="dec"
        HYPRE_COMPILE_MACHINE="gps"
        HYPRE_RUN_MACHINE="gps320"
        HYPRE_REMOTE_DIR="/usr/casc/hypre/tru64_5/AUTOTEST"
	HYPRE_MACHINE_COMMANDS="-r $HYPRE_RUN_MACHINE -nse 1 -a 2 -cf"
        HYPRE_MESSAGE='SECONDARY[GPS]'
        ;;
     -gpsmp)
        HYPRE_ARCH="dec"
        HYPRE_COMPILE_MACHINE="gps"
        HYPRE_RUN_MACHINE="gps320"
        HYPRE_REMOTE_DIR="/usr/casc/hypre/tru64_5/AUTOTEST"
        HYPRE_MACHINE_COMMANDS="-r $HYPRE_RUN_MACHINE -nse 1 -a 1 -cfo 2"
        HYPRE_MESSAGE='SECONDARY[OpenMP-GPS]'
        ;;
     -ilx)
        HYPRE_ARCH="linux"
        HYPRE_COMPILE_MACHINE="ilx"
        HYPRE_RUN_MACHINE="ilx"
        HYPRE_REMOTE_DIR="/usr/casc/hypre/chaos_2_ia32/AUTOTEST"
	HYPRE_MACHINE_COMMANDS="-ne 1 -a 2 -cf"
        HYPRE_MESSAGE='SECONDARY[ILX]'
        ;;
     -insure)
        HYPRE_ARCH="linux"
        HYPRE_COMPILE_MACHINE="tux149"
        HYPRE_RUN_MACHINE=""
        HYPRE_REMOTE_DIR="/usr/casc/hypre/i686-pc-linux-gnu-insure/AUTOTEST"
	HYPRE_MACHINE_COMMANDS="-i 2"
        HYPRE_MESSAGE='PRIMARY[insure++]'
        ;;
     -mcr)
        HYPRE_ARCH="linux"
        HYPRE_COMPILE_MACHINE="mcr"
        HYPRE_RUN_MACHINE="mcr"
        HYPRE_REMOTE_DIR="/usr/casc/hypre/chaos_2_ia32_elan3/AUTOTEST"
        HYPRE_MACHINE_COMMANDS="-nse 1 -a 2 -cf"
        HYPRE_MESSAGE='SECONDARY[MCR]'
        ;;
     -pengra)
        HYPRE_ARCH="linux"
        HYPRE_COMPILE_MACHINE="pengra"
        HYPRE_RUN_MACHINE="pengra"
        HYPRE_REMOTE_DIR="/usr/casc/hypre/chaos_2_ia32_elan3/AUTOTEST"
        HYPRE_MACHINE_COMMANDS="-nse 1 -a 2 -cf"
        HYPRE_MESSAGE='SECONDARY[Pengra]'
        ;;
     -red)
        HYPRE_ARCH="red"
        HYPRE_COMPILE_MACHINE="sasn100"
        HYPRE_RUN_MACHINE="janus"
        HYPRE_REMOTE_DIR="/usr/apps/hypre/AUTOTEST"
	HYPRE_MACHINE_COMMANDS="-r $HYPRE_RUN_MACHINE -o 1 -a 2 -cf"
        HYPRE_MESSAGE='OTHER[RED]'
        ;;
     -tux149)
        HYPRE_ARCH="linux"
        HYPRE_COMPILE_MACHINE="tux149"
        HYPRE_RUN_MACHINE=""
        HYPRE_REMOTE_DIR="/usr/casc/hypre/i686-pc-linux-gnu/AUTOTEST"
        HYPRE_MACHINE_COMMANDS="-b 1 -nsde 1 -a 2 -cf"
        HYPRE_MESSAGE='PRIMARY[default]'
        COMPILERSELECT="default"
        ;;
     -tuxpgi)
        HYPRE_ARCH="linux"
        HYPRE_COMPILE_MACHINE="tux149"
        HYPRE_RUN_MACHINE=""
        HYPRE_REMOTE_DIR="/usr/casc/hypre/i686-pc-linux-gnu-pgi5.x/AUTOTEST"
        HYPRE_MACHINE_COMMANDS="-ndse 1 -a 2 -cf"
        HYPRE_MESSAGE='SECONDARY[pgi]'
        COMPILERSELECT="pgi"
        ;;
     -tuxabsoft)
        HYPRE_ARCH="linux"
        HYPRE_COMPILE_MACHINE="tux149"
        HYPRE_RUN_MACHINE=""
        HYPRE_REMOTE_DIR="/usr/casc/hypre/i686-pc-linux-gnu-gcc3.x/AUTOTEST"
        HYPRE_MACHINE_COMMANDS="-b 1 -nde 1 -a 2 -cf"
        HYPRE_MESSAGE='SECONDARY[Absoft-Pro8.0]'
        COMPILERSELECT="absoft"
        ;;
     -tuxlahey)
        HYPRE_ARCH="linux"
        HYPRE_COMPILE_MACHINE="tux149"
        HYPRE_RUN_MACHINE=""
        HYPRE_REMOTE_DIR="/usr/casc/hypre/i686-pc-linux-gnu-gcc3.x/AUTOTEST"
        HYPRE_MACHINE_COMMANDS="-b 1 -nde 1 -a 2 -cf"
        HYPRE_MESSAGE='SECONDARY[lahey]'
        COMPILERSELECT="lahey"
        ;;
     -tuxintel)
        HYPRE_ARCH="linux"
        HYPRE_COMPILE_MACHINE="tux149"
        HYPRE_RUN_MACHINE=""
        HYPRE_REMOTE_DIR="/usr/casc/hypre/i686-pc-linux-gnu-gcc3.x/AUTOTEST"
        HYPRE_MACHINE_COMMANDS="-b 1 -nde 1 -a 2 -cf"
        HYPRE_MESSAGE='SECONDARY[Intel-8.0]'
        COMPILERSELECT="intel"
        ;;
     -tuxkai)
        HYPRE_ARCH="linux"
        HYPRE_COMPILE_MACHINE="tux149"
        HYPRE_RUN_MACHINE=""
        HYPRE_REMOTE_DIR="/usr/casc/hypre/i686-pc-linux-gnu-kai/AUTOTEST"
	HYPRE_MACHINE_COMMANDS="-b 1 -nde 1 -a 2 -cf"
        HYPRE_MESSAGE='SECONDARY[KCC]'
        COMPILERSELECT="kai"
        ;;
     -tuxlocal)
        HYPRE_ARCH="linux"
        HYPRE_COMPILE_MACHINE="tux149"
        HYPRE_RUN_MACHINE=""
        HYPRE_REMOTE_DIR="`pwd`"
        HYPRE_MACHINE_COMMANDS="-e 2"
        HYPRE_MESSAGE='LOCAL-TEST[default]'
        COMPILERSELECT="default"
        ;;
  esac
}


#==============================================================================
#    Mail error summary file 
#       Define mail recipients and mail program to be used
#       Send messages
#==============================================================================
hypre_mail_summary()
{

  HYPRE_DEFAULT_EMAIL="hill66@llnl.gov"
  HYPRE_ALL_EMAIL="hill66@llnl.gov\
                   rfalgout@llnl.gov\
                   abaker@llnl.gov\
                   painter1@llnl.gov\
                   lee123@llnl.gov\
                   kolev1@llnl.gov\
                   yang11@llnl.gov\
                   chtong@llnl.gov\
                   vhenson@llnl.gov"

#
# Define mail program to be used
   if [ "$HYPRE_ARCH" = "linux" ] ; then
      [ -x /usr/bin/Mail ] && HYPRE_MAIL=/usr/bin/Mail
      [ -x /usr/bin/mhmail ] && HYPRE_MAIL=/usr/bin/mhmail
   else
      [ -x /usr/bin/Mail ] && HYPRE_MAIL=/usr/bin/Mail
      [ -x /usr/bin/mailx ] && HYPRE_MAIL=/usr/bin/mailx
      [ -x /usr/sbin/mailx ] && HYPRE_MAIL=/usr/sbin/mailx
   fi
#
#               mail summaries
   SUBJECT="Autotest Error Summary `date '+%D'`"

   if [ "$DEBUG_MODE" = "yes" ] ; then
      ${HYPRE_MAIL} -s "$SUBJECT" $HYPRE_DEFAULT_EMAIL < $HYPRE_TEST_SUMMARY_FILE
   else
      ${HYPRE_MAIL} -s "$SUBJECT" $HYPRE_ALL_EMAIL < $HYPRE_TEST_SUMMARY_FILE
   fi

   echo "Autotest mail sent"
}


#=============================================================================
# Functions for filtering misleading error messages
#    Removes specified messages from error files that do not reflect actual
#    errors
#=============================================================================
process_filter ()
{
  ErrorFile=$1
  shift
  if (egrep "$@" $ErrorFile >/dev/null) ; then
     mv $ErrorFile $ErrorFile.tmp
     egrep -v "$@" $ErrorFile.tmp > $ErrorFile
     echo "-- applied filter:$@" >> $ErrorFile.orig
     cat $ErrorFile.tmp >> $ErrorFile.orig
  fi
}


apply_error_filters ()
{
  ErrorFile=$1
  if [ -s "${ErrorFile}" ] ; then
    HOST=`hostname`
    case $HOST in
      uv*)
        for ii in \
          '===\ End\ of\ Compilation'\
          'Compilation\ successful'\
          '^\ Guide\ \ \ '\
          ':\ 0\ errors\ in\ file'\
          '1500-030:\ \(I\)\ INFORMATION:'\
          '1500-010:\ \(W\)\ WARNING\ in'\
          ':\ 1506-068\ \(W\)\ Operation\ between\ types'\
          '^No\ begin\ line'\
          'autoconf\ has\ been\ disabled'\
          'babel_config.h.in:\ No\ such\ file\ or\ directory'\
          'configure:\ WARNING:\ '
        do process_filter $ErrorFile "${ii}"
        done
        ;;
      peng*)
        for ii in \
          '[A-Za-z0-9_]*\.[cCf]$'\
          '[A-Za-z0-9_]*\.cxx$'\
          '^[ \t]*$'\
          '^[0-9]*\ Lines\ Compiled$'\
          'external\ (subroutine|function)'\
          'EXTERNAL\ (SUBROUTINE|FUNCTION)'\
          'remark:\ LOOP\ WAS\ VECTORIZED'\
          '^icc:\ Command\ line\ warning:\ overriding'\
          '\ remark:\ '
        do process_filter $ErrorFile "${ii}"
        done
      ;;
      gps*)
        for ii in \
          '^No\ suffix\ list'\
          '^stty:\ tcgetattr:\ Not\ a\ typewriter'\
          'WARNING:\ \ guidef77\ has\ implied\ '\
          '^cc:\ Info:\ '
        do process_filter $ErrorFile "${ii}"
        done
      ;;
      tux*)
        for ii in \
          'autoconf\ has\ been\ disabled'\
          'automake\ has\ been\ disabled'\
          'autoheader\ has\ been\ disabled'\
          'configure:\ WARNING:\ Configuration\ for'\
          'configure:\ WARNING:\ Skipping\ Java'\
          'babel_config.h.in:\ No\ such\ file\ or\ directory'\
          'Insure\ messages\ will\ be\ written\ to\ insure'\
          'TCA\ log\ data\ will\ be\ merged\ with\ tca'\
          'PGC/x86\ Linux/x86\ 3.3-1:\ compilation\ completed\ with\ warnings'\
          'sed:\ Couldn.t\ close\ '
        do process_filter $ErrorFile "${ii}"
        done
      ;;
      vivid*)
        for ii in \
          'xauth:\ \ error\ in\ locking\ authority\ file\ '
        do process_filter $ErrorFile "${ii}"
        done
      ;;
    esac
  fi
}


#==============================================================================
#    Search given directory for non-zero length error files
#       directory is set just before calling this routine
#       run ls to get a list of error files
#       for each file in the list; if it exists and is readable;
#       apply the error filters then check to see if it still exists
#       with a non-zero length; if so, increment the error counter
#==============================================================================
search_error_files()
{
   errlist="`ls *.err`"
   for errfile in ${errlist}
   do
      if [ -r ${errfile} ]
      then
         apply_error_filters ${errfile}
         if [ -s ${errfile} ]
         then
            TOTERR=`expr $TOTERR + 1`
         fi
      fi
   done
}


#==============================================================================
#    Create summary file of test errors
#       Set list of default tests and driver code directories
#       In the directory in which this script is running, create the output file
#       For each test in the default list, search the list of tests run for it
#       if the test was run, search the linear_solvers, test and driver directories
#       for error files of non-zero length.  If there are some error files; get the
#       name of the individual summary error file in the REMOTE_DIR.  
#       All printing is done in the directory in which this script is running.
#==============================================================================
hypre_create_summary_file()
{
   HYPRE_DEFAULT_TESTS="PRIMARY[default]\
                        PRIMARY[insure++]\
                        LOCAL-TEST[default]\
                        SECONDARY[GPS]\
                        SECONDARY[OpenMP-GPS]\
                        SECONDARY[MCR]\
                        SECONDARY[ILX]\
                        SECONDARY[Pengra]\
                        SECONDARY[pgi]\
                        SECONDARY[lahey]\
                        SECONDARY[KCC]\
                        SECONDARY[Intel-8.0]\
                        SECONDARY[Absoft-Pro8.0]"

   HYPRE_STD_TEST_DIRS="TEST_fac TEST_ij TEST_sstruct TEST_struct"

   cd ${HYPRE_AUTOTEST_EXECUTE_DIR}
   HYPRE_TEST_SUMMARY_FILE="autotest.summary.`date '+%Y%m%d'`.html"

   printf "<html>\n" > $HYPRE_TEST_SUMMARY_FILE
   printf "<head> </head>\n" >> $HYPRE_TEST_SUMMARY_FILE
   printf "<PRE>\n" >> $HYPRE_TEST_SUMMARY_FILE
   printf "<body>\n" >> $HYPRE_TEST_SUMMARY_FILE
   printf "%s<br>\n" "       Autotest Results for `date '+%D'` " >> $HYPRE_TEST_SUMMARY_FILE
   printf "%s<br>\n" "--------------------------------------------" >> $HYPRE_TEST_SUMMARY_FILE

   for test in ${HYPRE_DEFAULT_TESTS}
   do
      TOTERR=0
      found_test=0

      for runtest in ${HYPRE_TESTS_RUN}
      do
         hypre_set_machine_options ${runtest}
         if [ "${test}" = "${HYPRE_MESSAGE}" ]
         then
            found_test=1
            cd ${HYPRE_REMOTE_DIR}/linear_solvers
            search_error_files

            cd ${HYPRE_REMOTE_DIR}/linear_solvers/test
            search_error_files

            for dir in ${HYPRE_STD_TEST_DIRS}
            do
               cd ${HYPRE_REMOTE_DIR}/linear_solvers/test/${dir}
               search_error_files
            done

            cd ${HYPRE_REMOTE_DIR}
            archfile=`ls autotest.${HYPRE_ARCH}.*`
            if [-d ${HYPRE_REMOTE_DIR}/log ]
            then
               resultsfile="${HYPRE_REMOTE_DIR}/log/${archfile}"
            else
               resultsfile="${HYPRE_REMOTE_DIR}/${archfile}"
            fi

            cd ${HYPRE_AUTOTEST_EXECUTE_DIR}
            if [ "${TOTERR}" = "0" ]
            then
               printf "%-25s: " $test >> $HYPRE_TEST_SUMMARY_FILE
               printf "  `date '+%D'`" >> $HYPRE_TEST_SUMMARY_FILE
               printf "   PASSED" >> $HYPRE_TEST_SUMMARY_FILE
               printf "  <a href=\"%s\">%s</a><br>\n" ${resultsfile} ${archfile} >> $HYPRE_TEST_SUMMARY_FILE
            else
               printf "%-25s: " $test >> $HYPRE_TEST_SUMMARY_FILE
               printf "  `date '+%D'`" >> $HYPRE_TEST_SUMMARY_FILE
               printf " %5d Errors" ${TOTERR} >> $HYPRE_TEST_SUMMARY_FILE
               printf "  <a href=\"%s\">%s</a><br>\n" ${resultsfile} ${archfile} >> $HYPRE_TEST_SUMMARY_FILE
            fi
         fi
      done

      if [ "${found_test}" = "0" ]
      then
         printf "%-25s: " $test >> $HYPRE_TEST_SUMMARY_FILE
         printf "            N/A<br>\n" >> $HYPRE_TEST_SUMMARY_FILE
      fi

   done
   printf "</body>\n" >> $HYPRE_TEST_SUMMARY_FILE
   printf "</PRE>\n" >> $HYPRE_TEST_SUMMARY_FILE
   printf "</html>\n" >> $HYPRE_TEST_SUMMARY_FILE
}

#==============================================================================
# Beginning of 'main program' of script for regression testing hypre.
# Initialize variables
#==============================================================================
DEBUG_MODE=""
HYPRE_MESSAGE=""
COMPILERSELECT=""
HYPRE_RUN_MACHINE=""
HYPRE_SUMMARY_DIR="/usr/casc/hypre/AUTOTEST"
HYPRE_AUTOTEST_EXECUTE_DIR="`pwd`"
export HYPRE_RUN_MACHINE
export HYPRE_MESSAGE COMPILERSELECT HYPRE_AUTOTEST_EXECUTE_DIR HYPRE_SUMMARY_DIR

CVSROOT=/home/casc/repository
export CVSROOT


#=============================================================================
# Parse command line arguments.  If no args, print usage info and exit.
# the nocvs/rev/help/debug arguments are expected to precede all HostOptions
#=============================================================================
if [ $# -lt 1 ]
then
  usage
  exit 2
fi
case $1 in
    -h|-help) 
        help
        exit;;
    -d|-debug) 
        DEBUG_MODE="yes"
        set -xv
        shift;;
esac


#=============================================================================
# Define permissions
#=============================================================================
OldMask=`umask -S`
umask u=rwx,g=rx,o=rx


#=============================================================================
# Check out the repository into the HYPRE_REMOTE_DIR directory, if requested.
# The repository resides on the CASC cluster; before checking out a new version
# existing versions are removed.
#=============================================================================
if [ "$1" = "-nocvs" ]
then
   shift
else
   if [ ! -d "$CVSROOT" ]
   then
      echo "Error: no CVS repository location found, CVSROOT = $CVSROOT"
      exit
   fi
   rm -fR linear_solvers
   if [ "$1" = "-rev" ]
   then
      REV=$2
      shift
      shift
      cvs -q checkout -r $REV -P linear_solvers 1> $0.checkout.log 2> $0.checkout.err
   else
      cvs -q checkout -P linear_solvers 1> $0.checkout.log 2> $0.checkout.err
   fi
   chmod -f a+rX,u+w,go-w $0.checkout.*
   chgrp -f hypre $0.checkout.*
fi


#==============================================================================
# set permissions and group for linear_solvers directory
#==============================================================================
chmod -fR a+rX,u+w,go-w linear_solvers
chgrp -fR hypre linear_solvers


#==============================================================================
# Run test suites on remote machines
# NOTE: the command line should ONLY have the HostOptions left for parsing
#       allowances are made in this loop for other options to be interspersed
#==============================================================================

HYPRE_TESTS_RUN=""
while [ "$*" != "" ]
do
  HYPRE_RUN_MACHINE=""
  COMPILERSELECT=""
  arg=$1
  cd ${HYPRE_AUTOTEST_EXECUTE_DIR}
  case ${arg} in
    -d|-debug) 
        DEBUG_MODE="yes"
        set -xv
        shift;;
    -h|-help) 
        help
        exit;;
    -nocvs)
        echo "ERROR: -nocvs option MUST be first argument! Quiting..."
        help
        exit;;
    *)
        HYPRE_TESTS_RUN="${HYPRE_TESTS_RUN} ${arg}"
        hypre_set_machine_options ${arg}
        perform_test
        shift;;
  esac

done


#==============================================================================
#    Create and email error summary
#==============================================================================
hypre_create_summary_file
hypre_mail_summary


#==============================================================================
#    Reset permissions
#==============================================================================
chmod -fR a+rX,ug+w,o-w ${HYPRE_REMOTE_DIR}
chgrp -fR hypre ${HYPRE_REMOTE_DIR}

chmod -fR a+rX,ug+w,o-w ${HYPRE_SUMMARY_DIR}
chgrp -fR hypre ${HYPRE_SUMMARY_DIR}


#==============================================================================
#    Store summary files in permanent locations
#==============================================================================
if [ -d "${HYPRE_REMOTE_DIR}/log"  ]
then
   mv -f ${HYPRE_REMOTE_DIR}/autotest.${HYPRE_ARCH}.* ${HYPRE_REMOTE_DIR}/log
fi

mv -f autotest.summary* ${HYPRE_SUMMARY_DIR}


#==============================================================================
# Restore original permissions
#==============================================================================
umask $OldMask
