#!/bin/sh 
#BHEADER***********************************************************************
# (c) 2000   The Regents of the University of California
#
# See the file COPYRIGHT_and_DISCLAIMER for a complete copyright
# notice, contact person, and disclaimer.
#
# $Revision$
#EHEADER***********************************************************************

#=============================================================================
# Create a few temporary variables, and assign default values to any
# unexported environment variables.
#=============================================================================
initialize_variables ()
{
  seconds; TOTAL=$SECS
  OldMask=`umask`
  umask 002
  Hdr="autotest"
  HYPRE_BATCH_MODE="no"
  HYPRE_SEND_MAIL="no"
  STD_TEST_DIRS='TEST_fei/*.sh TEST_ij/*.sh TEST_sstruct/*.sh TEST_struct/*.sh'
  BatchOpt=""
  MailOpt=""
  MailCmd="no"
  DEBUG_MODE="no"
  Skip=0
  Build=1
  Run=2
  PurifytoFile="--with-purify-to-file"
  InsuretoFile="--with-insure-to-file"
  PurifySelected=0
  InsureSelected=0
  if [ -z "$MAKE" -o "$MAKE" = "" ] ; then
    MAKE="make -i"
  fi
#
# Assume that we are started from autotest and have done 
# a "cd ${HYPRE_AUTOTEST_DIR}", however as long as we are
# above a "linear_solvers" directory we should be ok.
#
  if test ! "${HYPRE_AUTOTEST_DIR}" ; then
    HYPRE_AUTOTEST_DIR=`pwd`
    if [ -d ${HYPRE_AUTOTEST_DIR}/linear_solvers/test ] ; then
      HYPRE_AUTOTEST_DIR=${HYPRE_AUTOTEST_DIR}
    elif [ -d ${HYPRE_AUTOTEST_DIR}/../linear_solvers/test ] ; then
      HYPRE_AUTOTEST_DIR=${HYPRE_AUTOTEST_DIR}/..
    elif [ -d ${HYPRE_AUTOTEST_DIR}/../../linear_solvers/test ] ; then
      HYPRE_AUTOTEST_DIR=${HYPRE_AUTOTEST_DIR}/../..
    fi
  else			# assume we're executing from autotest
    if [ ! -d ${HYPRE_AUTOTEST_DIR} ] ; then
      if [ ! -d ./linear_solvers ] ; then
        echo "$0: no HYPRE_AUTOTEST_DIR environment variable"
        exit 2
      fi
    fi
  fi
  if [ -d ${HYPRE_AUTOTEST_DIR}/linear_solvers/test ] ; then
    SRC=linear_solvers
  fi
  if [ -d ${HYPRE_AUTOTEST_DIR}/src/test ] ; then
    SRC=src
  fi
  StdBuildDir=${HYPRE_AUTOTEST_DIR}/${SRC}
  StdTestDir=${HYPRE_AUTOTEST_DIR}/${SRC}/test
#
# Define HYPRE_ARCH
#
  if [ -r $StdTestDir/AUTOTEST/hypre_arch.sh ] ; then
    . $StdTestDir/AUTOTEST/hypre_arch.sh
  elif [ -r ./hypre_arch.sh ] ; then
    . ./hypre_arch.sh
  fi
  if [ -r $StdTestDir/AUTOTEST/env.${HYPRE_ARCH} ] ; then
    . $StdTestDir/AUTOTEST/env.${HYPRE_ARCH}
  elif [ -r ./env.${HYPRE_ARCH} ] ; then
    . ./env.${HYPRE_ARCH}
  fi
#
# Architecure specific configurations
#
  if [ "$HYPRE_ARCH" = "blue" ] ; then
    CONFIGURE="./nopoe ./configure"
  else
    CONFIGURE="./configure"
  fi
#
# If NOT started by autotest (hence no HYPRE_*_EMAIL variable
# defined) default mail to UID only.
#
  if test ! "$HYPRE_MAIL" ; then
    if [ "$HYPRE_ARCH" = "linux" ] ; then
      [ -x /usr/bin/Mail ] && HYPRE_MAIL=/usr/bin/Mail
      [ -x /usr/bin/mhmail ] && HYPRE_MAIL=/usr/bin/mhmail
    else
      [ -x /usr/bin/Mail ] && HYPRE_MAIL=/usr/bin/Mail
      [ -x /usr/bin/mailx ] && HYPRE_MAIL=/usr/bin/mailx
      [ -x /usr/sbin/mailx ] && HYPRE_MAIL=/usr/sbin/mailx
    fi
  fi
  if test ! "${HYPRE_DEFAULT_EMAIL}" ; then
    if test ! "${USER_EMAIL}" ; then
      USER_EMAIL=Treadway1@LLNL.gov
    fi
    HYPRE_DEFAULT_EMAIL=${HYPRE_DEFAULT_EMAIL:=$USER_EMAIL}
    HYPRE_CHECKOUT_EMAIL=${HYPRE_CHECKOUT_EMAIL:=$USER_EMAIL}
    HYPRE_CONFIGURE_EMAIL=${HYPRE_CONFIGURE_EMAIL:=$USER_EMAIL}
    HYPRE_STRUCT_EMAIL=${HYPRE_STRUCT_EMAIL:=$USER_EMAIL}
    HYPRE_IJ_EMAIL=${HYPRE_IJ_EMAIL:=$USER_EMAIL}
    HYPRE_FEI_EMAIL=${HYPRE_FEI_EMAIL:=$USER_EMAIL}
    HYPRE_ALL_EMAIL=${HYPRE_ALL_EMAIL:=$USER_EMAIL}
  fi
}

#=============================================================================
# Function for parsing of input arguments
#=============================================================================

parse_arguments () { 
#
# The getopts follows posix.2, if sh is a posix shell as
# (as required by posix.2) then getopts is a built-in.
# If sh is a non posix.2 or a early Bourne shell (that
# probably implement the obsolute getopt) then
# getopts(1) will be used.
#
  while getopts :a:b:cDde:fhi:l:mno:p:q:r:sv: arg
  do
    argcur=$arg
    case $arg in
      a) confbuildtest $OPTARG  " "             "default"   0 0 0 0 1 0 1;;
      b) confbuildtest $OPTARG  "--with-babel"  "babel"     0 0 0 0 1 0 0;;
      c) build $Build "all++"   "all++"         "test";;
      D) DEBUG_MODE="yes";;
      d) build $Build "all"     "docs"          "docs";;
      e) confbuildtest $OPTARG  "--enable-debug" "debug"    0 0 0 0 1 0 1;;
      f) build $Build "all77"   "all77"         "test";;
      h) usage; exit 2;;
      i) confbuildtest 1        "--enable-debug" "debug"    0 0 0 0 1 0 1
         confbuildtest $OPTARG  "--with-insure" "insure"    0 0 0 0 1 0 1;;
     +i) confbuildtest $OPTARG  "--with-insure-to-file" \
                                                "insure"    0 0 0 0 1 0 1;;
      l) confbuildtest $OPTARG  "--enable-shared" "shared"  0 0 0 0 1 0 1;;
      m) HYPRE_SEND_MAIL="no"; MailOpt=""; MailCmd="yes";;
     +m) HYPRE_SEND_MAIL="yes"; MailOpt="-mail"; MailCmd="yes";;
      n) confbuildtest $Build   "--without-MPI" "no_mpi"    0 0 0 0 1 0 0;;
      o) confbuildtest $OPTARG  "--with-openmp" "openmp"    0 0 0 0 1 0 1;;
      p) HYPRE_DST_DIR=$OPTARG;;
      q) confbuildtest $OPTARG  "--with-purify-to-file" \
                                                "purify"    0 0 0 0 1 0 1;;
     +q) confbuildtest $OPTARG  "--with-purify" "purify"    0 0 0 0 1 0 1;;
      r) HYPRE_RUN_MACHINE=$OPTARG;;
      s) confbuildtest $Build   "--with-strict-checking" \
                                         "strict_checking"  0 0 0 0 1 0 0;;
      v) HYPRE_MESSAGE=$OPTARG;;
      :) echo "$0: \"$argcur\" requires a value"; exit 2;;
     \?) echo "$0: INVALID option \"$argcur\" at $OPTIND"; exit 2;;
    esac
  done
  shift `expr $OPTIND - 1`
  #printf "Remaining arguments are: %s\n" "$*"
}

#=============================================================================
# Function for display of help/usage
#=============================================================================
usage () {
  printf "Usage: %s [-cDdfhmns] [-a opt] [-b opt] [-e opt]\n" $0
  printf "       [-i opt] [-l opt] [-o opt] [-p path]\n"
  printf "       [-q opt] [-r host] [-v text]\n"
  printf "\n"
  printf "Hypre autotest (Note: all options are positional dependent\n"
  printf "i.e., options are sequentially executed in left-to-right order).\n"
  printf "\n"
  printf "Options for the "opt" argument are "0", "1", or "2" where:\n"
  printf "  0=skip (ignore this test),\n"
  printf "  1=configure and make, and\n"
  printf "  2=configure, make and run.\n"
  printf "\n"
  printf "%s\n" "-a opt   All; the (default) configure, make, and execute. Also"
  printf "         performs make struct, IJ, fei, all, nofei, and\n"
  printf "         fei++, followed by the runtest script (when opt=2).\n"
  printf "%s\n" "-b opt   Babel; configure --with-babel, make, and execute)."
  printf "%s\n" "-c       C++; make all++ (no configure, or execute)."
  printf "%s\n" "-D       Turn on debug messages."
  printf "%s\n" "-d       Docs; make the documentation directory."
  printf "%s\n" "-e opt   Debug; configure --enable-debug, make, and execute)."
  printf "%s\n" "-f       F77; make all77 (no configure, or execute)."
  printf "%s\n" "-h       Help; display this help message."
  printf "%s\n" "-i opt   Insure++; perform configure --with-insure. Output"
  printf "         is appended to a file called insure.log.\n"
  printf "%s\n" "-l opt   Shared; configure --enable-shared, make, and execute)."
  printf "%s\n" "-m       Mail; mail error summary to developers."
  printf "%s\n" "+m       Mail+; mail error logs to developers."
  printf "%s\n" "-n       NoMPI; configure --without-MPI, make struct, IJ,"
  printf "         and all (no execute option).\n"
  printf "%s\n" "-o opt   openMP; configure --with-openmp, make."
  printf "%s\n" "-p path  Path to test directory (copied from local test)."
  printf "%s\n" "-q opt   Purify; perform configure --with-purify-to-file."
  printf "         Output is appended to a file called purify.log.\n"
  printf "%s\n" "+q opt   Purify; no file output option (interactive)."
  printf "%s\n" "-r host  Remote; remote exection is performed on "host"."
  printf "%s\n" "-s       Strict; configure --with-strict-checking,"
  printf "         followed by make struct, IJ, all(no execute option).\n"
  printf "%s\n" "-v text  Additional text to prefix to email subject line."
}

#=============================================================================
# Function for filtering misleading error messages
#=============================================================================

process_filter () {
  if [ "$DEBUG_MODE" = "yes" ] ; then
    set -xv
  fi
  ErrorFile=$1
  shift
  if (egrep "$@" $ErrorFile >/dev/null)
  then          
    mv $ErrorFile $ErrorFile.tmp
    egrep -v "$@" $ErrorFile.tmp > $ErrorFile
    echo "-- applied filter:$@" >> $ErrorFile.orig
    cat $ErrorFile.tmp >> $ErrorFile.orig
  fi
}
multi_line_filter () {
  if [ "$DEBUG_MODE" = "yes" ] ; then
    set -xv
  fi
  ErrorFile=$1
  shift
  Join=$1
  shift
  if (egrep "$@" $ErrorFile >/dev/null)
  then
    cp $ErrorFile $ErrorFile.tmp
    while (egrep "$@" $ErrorFile.tmp >/dev/null)
    do
      ed $ErrorFile.tmp <<EOF >/dev/null
/$@/
.,+${Join}j
d
w
q
EOF
    done
    echo "-- applied multi-line filter:$@" >> $ErrorFile.orig
    cat $ErrorFile >> $ErrorFile.orig
    mv $ErrorFile.tmp $ErrorFile 
  fi
}
multi_line_delete () {
  if [ "$DEBUG_MODE" = "yes" ] ; then
    set -xv
  fi
  ErrorFile=$1
  shift
  DelLines=$1
  shift
  if (egrep "$@" $ErrorFile >/dev/null)
  then
    cp $ErrorFile $ErrorFile.tmp
    while (egrep "$@" $ErrorFile.tmp >/dev/null)
    do
      ed $ErrorFile.tmp <<EOF >/dev/null
/$@/
.,+${DelLines}d
w
q
EOF
    done
    echo "-- applied multi-line-delete filter:$@" >> $ErrorFile.orig
    cat $ErrorFile >> $ErrorFile.orig
    mv $ErrorFile.tmp $ErrorFile 
  fi
}
multi_line_bakdelete () {
  if [ "$DEBUG_MODE" = "yes" ] ; then
    set -xv
  fi
  ErrorFile=$1
  shift
  DelLines=$1
  shift
  if (egrep "$@" $ErrorFile >/dev/null)
  then
    cp $ErrorFile $ErrorFile.tmp
    while (egrep "$@" $ErrorFile.tmp >/dev/null)
    do
      ed $ErrorFile.tmp <<EOF >/dev/null
/$@/
-${DelLines},.d
w
q
EOF
    done
    echo "-- applied multi-line-backwards-delete filter:$@" >> $ErrorFile.orig
    cat $ErrorFile >> $ErrorFile.orig
    mv $ErrorFile.tmp $ErrorFile 
  fi
}
multi_line_range () {
  if [ "$DEBUG_MODE" = "yes" ] ; then
    set -xv
  fi
  ErrorFile=$1
  shift
  BackwardLines=$1
  shift
  ForewardLines=$1
  shift
  if (egrep "$@" $ErrorFile >/dev/null)
  then
    cp $ErrorFile $ErrorFile.tmp
    while (egrep "$@" $ErrorFile.tmp >/dev/null)
    do
      ed $ErrorFile.tmp <<EOF >/dev/null
/$@/
-${BackwardLines},+${ForewardLines}d
w
q
EOF
    done
    echo "-- applied multi-line-backwards-delete filter:$@" >> $ErrorFile.orig
    cat $ErrorFile >> $ErrorFile.orig
    mv $ErrorFile.tmp $ErrorFile 
  fi
}
apply_error_filters () {
  if [ "$DEBUG_MODE" = "yes" ] ; then
    set -xv
  fi
  ErrorFile=$1
  if [ -s "${ErrorFile}" ] ; then
    HOST=`hostname`
    case $HOST in
      fros*|blue*)
###   if [ "$HYPRE_ARCH" = "blue" ] ; then
        for ii in \
          '===\ End\ of\ Compilation'\
          'Compilation\ successful'\
          '^\ Guide\ \ \ '\
          ':\ 0\ errors\ in\ file'\
          '1500-030:\ \(I\)\ INFORMATION:'\
          '1500-010:\ \(W\)\ WARNING\ in'\
          ':\ 1506-068\ \(W\)\ Operation\ between\ types'\
          '^No\ begin\ line'\
          'autoconf\ has\ been\ disabled'\
          'automake\ has\ been\ disabled'\
          'autoheader\ has\ been\ disabled'\
          'babel_config.h.in:\ No\ such\ file\ or\ directory'\
          'configure:\ WARNING:\ '
        do process_filter $ErrorFile "${ii}"
        done
        for ii in \
          ':\ error\ \#172:'
        do multi_line_delete $ErrorFile 4 "${ii}"
        done
###   fi   # blue
        ;;
      ilx*)
        for ii in \
          ':\ compilation\ completed\ with\ warnings'
        do process_filter $ErrorFile "${ii}"
        done
      ;;
      peng*)
        for ii in \
          '[A-Za-z0-9_]*\.[cCf]$'\
          '[A-Za-z0-9_]*\.cxx$'\
          '^[ \t]*$'\
          '^[0-9]*\ Lines\ Compiled$'\
          'external\ (subroutine|function)'\
          'EXTERNAL\ (SUBROUTINE|FUNCTION)'\
          'remark:\ LOOP\ WAS\ VECTORIZED'\
          '^icc:\ Command\ line\ warning:\ overriding'\
          '\ remark:\ '
        do process_filter $ErrorFile "${ii}"
        done
#       for ii in \
#         '266:\ function\ declared\ implicitly'
#       do multi_line_delete $ErrorFile 3 "${ii}"
#       done
#       for ii in \
#         '\ :\ Terminating\ a\ DO\ loop\ with\ a\ statement\ other\ than\ '\
#         '\ :\ Type\ size\ specifiers\ are\ an\ extension\ to\ standard '\
#         '\ :\ DO\ loops\ sharing\ the\ same\ terminating\ statement\ is\ '
#       do multi_line_bakdelete $ErrorFile 3 "${ii}"
#       done
      ;;
      riptide*)
        for ii in \
          '\ is\ not\ used\ for\ resolving\ any\ symbol'\
          'ld64:\ WARNING\ 84\ :\ '
        do process_filter $ErrorFile "${ii}"
        done
      ;;
      tckk*|tc2k*|gps*)
        for ii in \
          '^stty:\ tcgetattr:\ Not\ a\ typewriter'\
          'WARNING:\ \ guidef77\ has\ implied\ '\
          '^cc:\ Info:\ '
        do process_filter $ErrorFile "${ii}"
        done
        for ii in \
          '\-\-\-\-'
        do multi_line_bakdelete $ErrorFile 1 "${ii}"
        done
      ;;
      tux*)
        for ii in \
          '(autoconf|automake|autoheader)\ has\ been\ disabled'\
          'configure:\ WARNING:\ Configuration\ for'\
          'babel_config.h.in:\ No\ such\ file\ or\ directory'\
          'Insure\ messages\ will\ be\ written\ to\ insure'\
          'TCA\ log\ data\ will\ be\ merged\ with\ tca'\
          'PGC/x86\ Linux/x86\ 3.3-1:\ compilation\ completed\ with\ warnings'\
          'sed:\ Couldn.t\ close\ '
        do process_filter $ErrorFile "${ii}"
        done
      ;;
      vivid*)
        for ii in \
          'xauth:\ \ error\ in\ locking\ authority\ file\ '
        do process_filter $ErrorFile "${ii}"
        done
      ;;
      achi*|sunup*)		# sparc-sun-solaris2.8
        for ii in \
          'Option -fexceptions passed to ld'\
          '(autoconf|automake|autoheader) has been disabled'\
          'babel_config.h.in: No such file or directory'\
          'xauth:  error in locking authority file '\
          '^No begin line'\
          '^configure: WARNING: '
        do process_filter $ErrorFile "${ii}"
        done
        for ii in \
          ': warning: assignment type mismatch:'
        do multi_line_delete $ErrorFile 1 "${ii}"
        done
      ;;
      perr*|poin*)		# sparc-sun-solaris2.7
        for ii in \
          '(autoconf|automake|autoheader) has been disabled'\
          'python: fatal: '\
          'babel_config.h.in: No such file or directory'\
          'xauth:  error in locking authority file '\
          'Xauthority not writable, changes will be ignored'\
          '^No begin line'\
          '^configure: WARNING: '
        do process_filter $ErrorFile "${ii}"
        done
        for ii in \
          ': warning: assignment type mismatch:'
        do multi_line_delete $ErrorFile 1 "${ii}"
        done
        for ii in \
          'Warning: Releases of GCC earlier than version 3.0'
        do multi_line_range $ErrorFile 1 9 "${ii}"
        done
      ;;
    esac
  fi
}

#=============================================================================
# Function for mailing error messages
#=============================================================================

mail_summary () {
  echo "Autotest mailing error summary"
  CTOTCNT=0
  CLOGCNT=0
  CERRCNT=0
  AutotestFailureCount=0
  CLIST=""; ELIST=""
  DWRNCNT=0; DERRCNT=0
  if test "${HYPRE_DST_DIR}" ; then
    cd $HYPRE_DST_DIR
  else
    cd $HYPRE_AUTOTEST_DIR
  fi
  SUMFILE="autotest.$HYPRE_ARCH.`date '+%Y%m%d'`"
  if [ -z "$HYPRE_COMPILE_MACHINE" -o "$HYPRE_COMPILE_MACHINE" = "" ] ; then
    HYPRE_COMPILE_MACHINE=`hostname`
  fi
  if [ -z "$HYPRE_RUN_MACHINE" -o "$HYPRE_RUN_MACHINE" = "" ] ; then
    HYPRE_RUN_MACHINE=`hostname`
  fi
  printf "%s\n" "--------------------------------------------" > $SUMFILE
  printf "Autotest error summary for `date`\n" >> $SUMFILE
  printf "Target architecure: %s\n" $HYPRE_ARCH >> $SUMFILE
  printf "Compile machine:    %s\n" $HYPRE_COMPILE_MACHINE >> $SUMFILE
  printf "Execute machine:    %s\n" $HYPRE_RUN_MACHINE >> $SUMFILE
  printf "Operating system:   `uname -a`\n" >> $SUMFILE
  if test "${HYPRE_DST_DIR}" ; then
    printf "Local Directory:    %s\n" $HYPRE_AUTOTEST_DIR >> $SUMFILE
    printf "Directory:          %s\n" $HYPRE_DST_DIR >> $SUMFILE
  else
    printf "Directory:          %s\n" $HYPRE_AUTOTEST_DIR >> $SUMFILE
  fi
  printf "%s\n" "--------------------------------------------" >> $SUMFILE
  printf "Compile summary: Status: Warnings: Errors\n" >> $SUMFILE
  for ConfOpt in babel debug default no_mpi openmp \
           insure purify shared strict_checking \
           docs all++ all77
  do
    printf "%-15s: " $ConfOpt >> $SUMFILE
    TestCaseSuccessCount=0; TestCaseFailedCount=0;
    DWRNCNT=0; DERRCNT=0;
    for MakeOpt in ""  all configure IJ fei++ \
           fei nofei sstruct struct
    do
      FILE=autotest.$ConfOpt.$MakeOpt
      LFILE=`echo $FILE|sed -e 's/\.$//'`.log
      for i in $LFILE ${SRC}/${LFILE} \
               ${SRC}/test/${LFILE} ${SRC}/docs/${LFILE} 
      do
        if [ -r "${i}" ] ; then
          CTOTCNT=`expr $CTOTCNT + 1`
          EFILE=`echo $i|sed -e 's/log$//'`err
          apply_error_filters ${EFILE}
          if [ -s "${EFILE}" ] ; then
            AutotestFailureCount=`expr $AutotestFailureCount + 1`
            CERRCNT=`expr $CERRCNT + 1`
            TestCaseFailedCount=`expr $TestCaseFailedCount + 1`
            CLIST="${CLIST}${EFILE}\n"
            DWRNNUM=0; DERRNUM=0;
            DWRNNUM=`grep -i warning ${EFILE}|wc -l`
            DERRNUM=`grep -i error ${EFILE}|wc -l`
            DWRNCNT=`expr $DWRNCNT + $DWRNNUM`
            DERRCNT=`expr $DERRCNT + $DERRNUM`
          else
            CLOGCNT=`expr $CLOGCNT + 1`
            TestCaseSuccessCount=`expr $TestCaseSuccessCount + 1`
          fi
        fi
      done
    done
    if [ "$TestCaseFailedCount" != "0" ] ; then
      printf "Failed:    %2d   :   %2d\n" $DWRNCNT $DERRCNT >> $SUMFILE
    elif [ "$TestCaseSuccessCount" != "0" ] ; then
      printf "Passed\n" >> $SUMFILE
    else
      printf "N/A\n" >> $SUMFILE
    fi
  done
  if [ "$DEBUG_MODE" = "yes" ] ; then
    printf "%2d test failed\n" $CERRCNT
    printf "%2d test succeeded\n" $CLOGCNT
    printf "%2d test total\n" $CTOTCNT
  fi
  printf "\n" >> $SUMFILE
  printf "%2d test failed\n" $CERRCNT  >> $SUMFILE
  printf "%2d test succeeded\n" $CLOGCNT >> $SUMFILE
  printf "%2d test total\n" $CTOTCNT >> $SUMFILE
  if [ "$CLIST" != "" ] ; then
    printf "non zero error log file(s):\n" >> $SUMFILE
    printf "${CLIST}" >> $SUMFILE
  fi
  printf "%s\n" "--------------------------------------------" >> $SUMFILE
# currently only a single instance of opt=2 (configure, make, and run)
# can be processed (actually earlier information gets overwritten).
  printf "Execute summary:\n" >> $SUMFILE
  if [ "$HYPRE_BATCH_MODE" = "yes" ] ; then
    printf "Jobs Scheduling via DPCS\n" >> $SUMFILE
  fi
    TotalTestCount=0
    TotalSuccessCount=0
    TotalFailureCount=0
    for i in fei ij sstruct struct ; do
      printf "%-15s: " ${i} >> $SUMFILE
      TestCaseSuccessCount=0; TestCaseFailedCount=0; TestCaseFailedFlag=0
      for j in ${SRC}/test/TEST_${i}/*.sh ; do
        TotalTestCount=`expr $TotalTestCount + 1`
        TestCaseFailedFlag=0
        ErrFile=`echo $j | sed -e 's/\.sh$/.err/'`
        OutFile=`echo $j | sed -e 's/\.sh$/.out/'`
# look for non-zero length subtest, TEST_*/test.err.[0-9]+ files
        if [ "$PurifySelected" = "0" -a "$InsureSelected" = "0" ] ; then
          for k in "${ErrFile}.[0-9]+"; do
            apply_error_filters ${k}
            if [ -s "${k}" ] ; then
              if [ "$DEBUG_MODE" = "yes" ] ; then
                printf "nonzero .err. file = ${k}\n"
              fi
              AutotestFailureCount=`expr $AutotestFailureCount + 1`
              TotalFailureCount=`expr $TotalFailureCount + 1`
              TestCaseFailedCount=`expr $TestCaseFailedCount + 1`
              ELIST="${ELIST}${k}\n"
              TestCaseFailedFlag=1
              break
            fi
          done
        fi
        if [ "$TestCaseFailedFlag" = "0" ] ; then
# look for all of the TEST_*/test.out.* files
          for k in ${OutFile}.[0-9]+; do
# look for non-zero length subtest, TEST_*/test.out.[0-9]+ files
            apply_error_filters ${k}
            if [ -s "${OutFile}" ] ; then
              if [ "$DEBUG_MODE" = "yes" ] ; then
                printf "nonzero .out. file = ${OutFile}\n"
              fi
              AutotestFailureCount=`expr $AutotestFailureCount + 1`
              TotalFailureCount=`expr $TotalFailureCount + 1`
              TestCaseFailedCount=`expr $TestCaseFailedCount + 1`
              ELIST="${ELIST}${k}\n"
              TestCaseFailedFlag=1
              break
            fi
          done
        fi
        if [ "$TestCaseFailedFlag" = "0" ] ; then
# look for a TEST_*/test.err files
          apply_error_filters ${ErrFile}
          if [ -s "${ErrFile}" ] ; then
            if [ "$DEBUG_MODE" = "yes" ] ; then
              printf "nonzero .err file = ${ErrFile}\n"
            fi
            AutotestFailureCount=`expr $AutotestFailureCount + 1`
            TotalFailureCount=`expr $TotalFailureCount + 1`
            TestCaseFailedCount=`expr $TestCaseFailedCount + 1`
            ELIST="${ELIST}${ErrFile}\n"
            TestCaseFailedFlag=1
          fi
        fi
        if [ "$TestCaseFailedFlag" = "0" ] ; then
          TotalSuccessCount=`expr $TotalSuccessCount + 1`
          TestCaseSuccessCount=`expr $TestCaseSuccessCount + 1`
        fi
      done
      if [ "$TestCaseFailedCount" != "0" ] ; then
        printf "Passed:    %2d  Failed:   %2d\n" $TestCaseSuccessCount $TestCaseFailedCount >> $SUMFILE
      elif [ "$TestCaseSuccessCount" != "0" ] ; then
        printf "Passed:    %2d\n" $TestCaseSuccessCount >> $SUMFILE
      else
        printf "N/A\n" >> $SUMFILE
      fi
    done
    if [ "$DEBUG_MODE" = "yes" ] ; then
      printf "%2d test failed\n" $TotalFailureCount
      printf "%2d test succeeded\n" $TotalSuccessCount
      printf "%2d test total\n" $TotalTestCount
    fi
    printf "\n" >> $SUMFILE
    printf "%2d test failed\n" $TotalFailureCount >> $SUMFILE
    printf "%2d test succeeded\n" $TotalSuccessCount >> $SUMFILE
    printf "%2d test total\n" $TotalTestCount >> $SUMFILE
    if [ "$ELIST" != "" ] ; then
      printf "non zero error log file(s):\n" >> $SUMFILE
      printf "${ELIST}" >> $SUMFILE
    fi
  printf "%s\n" "--------------------------------------------" >> $SUMFILE
  chgrp hypre $SUMFILE
  if test "${HYPRE_DST_DIR}" ; then
    cp -p $SUMFILE $HYPRE_AUTOTEST_DIR 
  fi
  MAIL_HEADER="`uname -n` `uname -s`:`uname -r`.`uname -v`"
  if [ "$AutotestFailureCount" = "0" ] ; then
    SUBJECT="Autotest NO Errors ($MAIL_HEADER)"
  else
    SUBJECT="Autotest $AutotestFailureCount Errors ($MAIL_HEADER)"
  fi
  if test "${HYPRE_MESSAGE}" ; then
    SUBJECT="$HYPRE_MESSAGE $SUBJECT"
  fi
  if [ "$HYPRE_ARCH" = "linux" ] ; then
    if (echo ${HYPRE_MAIL}|grep "Mail" > /dev/null) ; then
      if [ "$DEBUG_MODE" = "yes" ] ; then
        ${HYPRE_MAIL} -s "$SUBJECT" $USER_EMAIL < $SUMFILE 
      else
        ${HYPRE_MAIL} -s "$SUBJECT" $HYPRE_ALL_EMAIL < $SUMFILE 
      fi
    else
      if [ "$DEBUG_MODE" = "yes" ] ; then
        ${HYPRE_MAIL} -s "$SUBJECT" -f Treadway1@LLNL.gov $USER_EMAIL < $SUMFILE 
      else
        ${HYPRE_MAIL} -s "$SUBJECT" -f Treadway1@LLNL.gov $HYPRE_ALL_EMAIL < $SUMFILE 
      fi
    fi
  else
    if [ "$DEBUG_MODE" = "yes" ] ; then
      ${HYPRE_MAIL} -s "$SUBJECT" -r Treadway1@LLNL.gov $USER_EMAIL < $SUMFILE 
    else
      ${HYPRE_MAIL} -s "$SUBJECT" -r Treadway1@LLNL.gov $HYPRE_ALL_EMAIL < $SUMFILE 
    fi
  fi
  echo "Autotest mail sent"
}

mail_errors () { 
  if [ "$MailCmd" = "yes" ] ; then
    if [ "$HYPRE_SEND_MAIL" = "yes" ] ; then
      echo "Autotest mailing error messages"
      cd $HYPRE_AUTOTEST_DIR
      for i in *.err \
        ${SRC}/*.err \
        ${SRC}/test/*.err \
        ${SRC}/docs/*.err
      do 
        if [ -s "$i" ] ; then 
          if [ -r "${i}.email" ] ; then
            RECIPIENTS=`cat ${i}.email` 
            SUBJECT="Autotest error: ${i} ($HYPRE_ARCH)"
            if [ "$HYPRE_ARCH" = "linux" ] ; then
              if (echo ${HYPRE_MAIL}|grep "Mail" > /dev/null) ; then
                if [ "$DEBUG_MODE" = "yes" ] ; then
                  ${HYPRE_MAIL} -s "$SUBJECT" $USER_EMAIL < $i 
                else
                  ${HYPRE_MAIL} -s "$SUBJECT" $RECIPIENTS < $i 
                fi
              else
                if [ "$DEBUG_MODE" = "yes" ] ; then
                  ${HYPRE_MAIL} -s "$SUBJECT" -f Treadway1@LLNL.gov $USER_EMAIL < $i 
                else
                  ${HYPRE_MAIL} -s "$SUBJECT" -f Treadway1@LLNL.gov $RECIPIENTS < $i 
                fi
              fi
            else
              if [ "$DEBUG_MODE" = "yes" ] ; then
                ${HYPRE_MAIL} -s "$SUBJECT" -r Treadway1@LLNL.gov $USER_EMAIL < $i 
              else
                ${HYPRE_MAIL} -s "$SUBJECT" -r Treadway1@LLNL.gov $RECIPIENTS < $i 
              fi
            fi
          fi
        fi 
      done 
      echo "Autotest mail sent"
    else
      mail_summary 
    fi
  fi
}

cleanup () { 
  umask $OldMask
  seconds; TOTAL=`expr $SECS - $TOTAL`
  echo "Autotest finished leaving $* after $TOTAL seconds"
}
#=============================================================================
# General purpose make function /w strict_checking error output redirection
#=============================================================================

makeit ()
{
MakeStr=$1	 MessageStr=$2
MailGroup=$3
if [ "$MessageStr" = "purify" ]
then				# don't need extra purify status messages
  PurifySelected=1
  $MAKE $MakeStr 1> ${Hdr}.${MessageStr}.${MakeStr}.log 2>&1
elif [ "$MessageStr" = "insure" ]
then				# don't need extra insure status messages
  InsureSelected=1
  $MAKE $MakeStr 1> ${Hdr}.${MessageStr}.${MakeStr}.log 2>&1
else
  $MAKE $MakeStr 1> ${Hdr}.${MessageStr}.${MakeStr}.log \
        2> ${Hdr}.${MessageStr}.${MakeStr}.err
fi
echo "$MailGroup" > ${Hdr}.${MessageStr}.${MakeStr}.err.email
}
#=============================================================================
# General purpose function for configure, make and execute
#=============================================================================

confbuildtest () 
{
BuildOpt=$1	 ConfigOption=$2  MessageStr=$3
IJOpt=$4	 FeiOpt=$5	  StructOpt=$6
SstructOpt=$7	 MakeOpt=$8	  BetaOpt=$9
shift                           # problem getting $10 on some systems
NoFeiOpt=$9
if [ ${BuildOpt} -ne $Skip ] ; then
  seconds; TIME=$SECS
  echo "Autotest starting configure and make of $MessageStr"
  if [ ${BuildOpt} -eq $Build -o ${BuildOpt} -eq $Run ] ; then
    cd $StdBuildDir
    if [ "$MessageStr" != "insure" ]
    then			# don't want to delete previous build
      if [ -f Makefile ]
      then
        $MAKE -i distclean	# assumed working with --enable-debug build
      fi
    fi
    [ -f config.cache ] && rm config.cache
    $CONFIGURE "$ConfigOption" 1> ${Hdr}.${MessageStr}.configure.log \
	2> ${Hdr}.${MessageStr}.configure.err
    echo "$HYPRE_CONFIGURE_EMAIL" > ${Hdr}.${MessageStr}.configure.err.email

    if [ $IJOpt -ne $Skip ] ; then
      makeit "IJ" $MessageStr "$HYPRE_IJ_EMAIL"
    fi

    if [ $FeiOpt -ne $Skip ] ; then
      makeit "fei" $MessageStr "$HYPRE_FEI_EMAIL"
    fi

    if [ $StructOpt -ne $Skip ] ; then
      makeit "struct" $MessageStr "$HYPRE_STRUCT_EMAIL"
    fi

    if [ $SstructOpt -ne $Skip ] ; then
      makeit "sstruct" $MessageStr "$HYPRE_STRUCT_EMAIL"
    fi

    if [ $MakeOpt -ne $Skip ] ; then
      makeit "all" $MessageStr "$HYPRE_DEFAULT_EMAIL"
    fi

    if [ $BetaOpt -ne $Skip ] ; then
      makeit "beta" $MessageStr "$HYPRE_DEFAULT_EMAIL"
    fi

  fi
  if [ ${BuildOpt} -eq $Run ] ; then
    echo "Autotest starting execution of $MessageStr"
    if [ $NoFeiOpt -ne $Skip ] ; then
      makeit "nofei" $MessageStr "$HYPRE_FEI_EMAIL"
      make install
      cd ${HYPRE_AUTOTEST_DIR}/${SRC}/test
      makeit "fei++" $MessageStr "$HYPRE_FEI_EMAIL"
    fi
    if test ! "${HYPRE_RUN_MACHINE}" ; then
      cd $HYPRE_AUTOTEST_DIR/${SRC}/test
      if [ "$DEBUG_MODE" = "yes" ] ; then
        ./runtest.sh -debug $BatchOpt $MailOpt $STD_TEST_DIRS
      else
        ./runtest.sh $BatchOpt $MailOpt $STD_TEST_DIRS
      fi
    else
      ssh ${HYPRE_RUN_MACHINE} "\
      (\
        cd ${HYPRE_AUTOTEST_DIR}/${SRC}/test;\
        [ -r ./AUTOTEST/env.${HYPRE_ARCH} ] && . ./AUTOTEST/env.${HYPRE_ARCH};\
        if [ "$DEBUG_MODE" = "yes" ] ; then
          ./runtest.sh -debug $BatchOpt $MailOpt $STD_TEST_DIRS \
        else
          ./runtest.sh $BatchOpt $MailOpt $STD_TEST_DIRS \
        fi
    )"
    fi
  fi
  seconds; TIME=`expr $SECS - $TIME`
  echo "Autotest finished $MessageStr taking $TIME seconds"
fi
}
#=============================================================================
# General purpose make function
#=============================================================================

build () 
{
BuildOpt=$1	 MakeOption=$2	 MessageStr=$3	MakeDir=$4
if [ $BuildOpt -ne $Skip ]
then
  seconds; TIME=$SECS
  echo "Autotest starting make of $MessageStr"
  cd $StdBuildDir/$MakeDir
  $MAKE $MakeOption 1> ${Hdr}.${MessageStr}.log \
	2> ${Hdr}.${MessageStr}.err
  echo "$HYPRE_ALL_EMAIL" > ${Hdr}.${MessageStr}.err.email
  seconds; TIME=`expr $SECS - $TIME`
  echo "Autotest finished $MessageStr taking $TIME seconds"
fi
}

#==============================================================================
# return the seconds since midnight in the variable SECS
#==============================================================================

seconds ()
{
HOUR=`date '+%H'`
HOUR=`expr $HOUR \* 3600`
MINS=`date '+%M'`
MINS=`expr $MINS \* 60`
SECS=`date '+%S'`
SECS=`expr $SECS + $MINS`
SECS=`expr $SECS + $HOUR`
}

#==============================================================================
# This script is the implementation script used to regression test hypre.
#==============================================================================

initialize_variables
parse_arguments $*
mail_errors
cleanup
