package Hypre {

   // Definition of Hypre interface.  JfP dec99 - feb00
   // Sources: partial design chart from Andy Cleary,
   // an earlier IDL file given me by Brent Smolinski
   // The case of the package name is chosen to prevent name conflicts.

   class StructuredGrid;
   interface StructuredGridI;
   interface StructuredGridBuilder;
   interface Stencil;
   class StructStencil;
   class StructMatrix;
   class StructVector;
   class Box;
   class MPI_Com;
   interface Solver;
   
// ---------------- Interfaces ----------------

   interface Operator {
      void Apply( in StructVector x, out StructVector b );
   };
   // ... Things which inherit from Operator include Matrix, Solver.

   interface LinearOperator extends Operator {
      void Apply( in StructVector x, out StructVector b );
   };

   interface StructuredGridVectorBuilder {
      int SetGrid( in StructuredGrid grid );
      int SetValues( in Box box, in array<double,1> values );
      // ... this is basically how the HYPRE functions work, except that
      // ilower, iupper, and dim are combined into a Box object.  Probably
      // it would be better to encode the "values" data structure in a more
      // natural form.
      void New( in StructuredGrid grid );
      int Setup( in StructuredGrid grid );
      StructVector GetConstructedObject();
   };

   interface StructuredGridMatrixBuilder {
      int SetGrid( in StructuredGrid grid );
      int SetStencil( in StructStencil stencil );
      int SetValues( in Box box, in array<int,1> stencil_indices,
                     in array<double,1> values );
      // ... this is basically how the HYPRE functions work, except that
      // ilower, iupper, and dim are combined into a Box object.  Probably
      // it would be better to encode the "values" data structure in a more
      // natural form.
      void New( in StructuredGrid grid, in StructStencil stencil,
                      	in int symmetric );
      int Setup( in StructuredGrid grid, in StructStencil stencil,
                          in int symmetric );
      StructMatrix GetConstructedObject();
   };

   interface StructuredGridBuilder 
   {
      int SetGridExtents( in Box box );
      void SetParameter( in string name, in double value );
      StructuredGrid GetConstructedObject();
      void New( in MPI_Com com, in int dimension );
      int Setup();
   };
   
   interface Stencil {
      int SetElement( in int element_index, inout array<int,1> element_offset );
   };

  interface Solver extends LinearOperator {
     void Apply( in StructVector b, out StructVector x );
     StructMatrix GetSystemOperator();
     StructVector GetResidual();
     void GetConvergenceInfo( in string name, out double value );
  };

  interface PreconditionedSolver {
     void Apply( in StructVector b, out StructVector x );
     StructMatrix GetSystemOperator();
     StructVector GetResidual();
     void GetConvergenceInfo( in string name, out double value );

     Solver GetPreconditioner();
  };

  interface SolverBuilder {
     void SetSystemOperator( in StructMatrix op );
     double GetParameter( in string name );
     void SetParameter( in string name, in double value );
     // ... int parameters input as double, will be converted back to real
     void New( in MPI_Com comm );
     void Setup( in StructMatrix A, in StructVector b, in StructVector x );
     SolverBuilder GetConstructedObject();    
  };

  interface PreconditionedSolverBuilder extends SolverBuilder {
     void SetSystemOperator( in StructMatrix op );
     double GetParameter( in string name );
     void SetParameter( in string name, in double value );
     void New( in MPI_Com comm );
     void Setup( in StructMatrix A, in StructVector b, in StructVector x );
     SolverBuilder GetConstructedObject();    

     void SetPreconditioner( in Solver precond );
  };


// ---------------- Classes ----------------

   class MPI_Com 
   {};
   
   // ---------------- Grid, matrix, vector classes

   class Box {
      void New( in array<int,1> lower, in array<int,1> upper,
               in int dimension );
      static Box Constructor( in array<int,1> lower, in array<int,1> upper,
               in int dimension );
      void Setup();
      void print();
   };

   // The "print" functions in this file print brief information
   // to stdout for debugging use.  The Matrix and Vector ones also
   // call the Hypre "Print" functions, which print their entire
   // contents to a file.

   class StructMatrix implements StructuredGridMatrixBuilder, LinearOperator {
      void print();
      int SetGrid( in StructuredGrid grid );
      int SetStencil( in StructStencil stencil );
      int SetValues( in Box box, in array<int,1> stencil_indices,
                     in array<double,1> values );
      void Apply( in StructVector b, out StructVector x );
      StructMatrix GetConstructedObject();
      void New( in StructuredGrid grid, in StructStencil stencil,
                      	in int symmetric );
      static StructMatrix Constructor
         ( in StructuredGrid grid, in StructStencil stencil, in int symmetric );
      int Setup( in StructuredGrid grid, in StructStencil stencil,
                          in int symmetric );
      };

   class StructVector implements StructuredGridVectorBuilder {
      void print();
      int SetGrid( in StructuredGrid grid );
      int SetValues( in Box box, in array<double,1> values );
      StructVector GetConstructedObject();
      void New( in StructuredGrid grid );
      static StructVector Constructor( in StructuredGrid grid );
      int Setup( in StructuredGrid grid );
   };

   class StructuredGrid implements StructuredGridBuilder
   {
      void print();
      int SetGridExtents( in Box box );
      void SetParameter( in string name, in double value );
      StructuredGrid GetConstructedObject();
      void New( in MPI_Com com, in int dimension );
      static StructuredGrid Constructor( in MPI_Com com, in int dimension );
      int Setup();
   };
   
         
   class StructStencil implements Stencil 
   {
      void print();
      int SetElement( in int element_index, inout array<int,1> element_offset );
      void New( in int dimension, in int size );
      static StructStencil Constructor( in int dimension, in int size );
      void Setup();
   };
   
  // ---------------- Solver and related classes

  // Some "standard" functions can be expected to work differently on different
  // solvers, hence have keyword strings in their argument lists.
  // The generic parameter type is a double because that's easily converted
  // to int but not vice versa.

  class StructJacobi implements Solver, SolverBuilder {
     void Apply( in StructVector b, out StructVector x );
     StructMatrix GetSystemOperator();
     StructVector GetResidual();
     void GetConvergenceInfo( in string name, out double value );

     void SetSystemOperator( in StructMatrix op );
     double GetParameter( in string name );
     void SetParameter( in string name, in double value );
     void New( in MPI_Com comm );
     void Setup( in StructMatrix A, in StructVector b, in StructVector x );
     static StructJacobi Constructor( in MPI_Com comm );
     SolverBuilder GetConstructedObject();
  };

  class PCG implements PreconditionedSolver, PreconditionedSolverBuilder {
     // Preconditioned Conjugant Gradient
     void Apply( in StructVector b, out StructVector x );
     StructMatrix GetSystemOperator();
     StructVector GetResidual();
     void GetConvergenceInfo( in string name, out double value );

     Solver GetPreconditioner();

     void SetSystemOperator( in StructMatrix op );
     double GetParameter( in string name );
     void SetParameter( in string name, in double value );
     void New( in MPI_Com comm );
     static PCG Constructor( in MPI_Com comm );
     void Setup( in StructMatrix A, in StructVector b, in StructVector x );
     SolverBuilder GetConstructedObject();    

     void SetPreconditioner( in Solver precond );

  };





}
;
