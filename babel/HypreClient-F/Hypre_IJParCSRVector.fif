C       
C       File:          Hypre_IJParCSRVector_Impl.f
C       Symbol:        Hypre.IJParCSRVector-v0.1.7
C       Symbol Type:   class
C       Babel Version: 0.8.0
C       SIDL Created:  20030306 17:05:23 PST
C       Generated:     20030306 17:05:26 PST
C       Description:   Client-side documentation text for Hypre.IJParCSRVector
C       
C       WARNING: Automatically generated; changes will be lost
C       
C       babel-version = 0.8.0
C       source-line   = 825
C       source-url    = file:/home/falgout/linear_solvers/babel/Interfaces.idl
C       

        THIS FILE IS DOCUMENTATION - DO NOT COMPILE IT!

C       
C       Symbol "Hypre.IJParCSRVector" (version 0.1.7)
C       
C       The IJParCSR vector class.
C       
C       Objects of this type can be cast to IJBuildVector or Vector
C       objects using the {\tt \_\_cast} methods.
C       
C       




C       
C       Create an instance of class Hypre.IJParCSRVector
C       

        subroutine Hypre_IJParCSRVector__create_f(retval)
        implicit none
C       out Hypre.IJParCSRVector retval
        integer*8 retval
        end


C       
C       Cast method for interface and class type conversions.
C       

        subroutine Hypre_IJParCSRVector__cast_f(self, name, retval)
        implicit none
C       in Hypre.IJParCSRVector self
        integer*8 self
C       in string name
        character*(*) name
C       out opaque retval
        integer*8 retval
        end


C       
C       <p>
C       Add one to the intrinsic reference count in the underlying object.
C       Object in <code>SIDL</code> have an intrinsic reference count.
C       Objects continue to exist as long as the reference count is
C       positive. Clients should call this method whenever they
C       create another ongoing reference to an object or interface.
C       </p>
C       <p>
C       This does not have a return value because there is no language
C       independent type that can refer to an interface or a
C       class.
C       </p>
C       

        subroutine Hypre_IJParCSRVector_addRef_f(self)
        implicit none
C       in Hypre.IJParCSRVector self
        integer*8 self
        end


C       
C       Decrease by one the intrinsic reference count in the underlying
C       object, and delete the object if the reference is non-positive.
C       Objects in <code>SIDL</code> have an intrinsic reference count.
C       Clients should call this method whenever they remove a
C       reference to an object or interface.
C       

        subroutine Hypre_IJParCSRVector_deleteRef_f(self)
        implicit none
C       in Hypre.IJParCSRVector self
        integer*8 self
        end


C       
C       Return true if and only if <code>obj</code> refers to the same
C       object as this object.
C       

        subroutine Hypre_IJParCSRVector_isSame_f(self, iobj, retval)
        implicit none
C       in Hypre.IJParCSRVector self
        integer*8 self
C       in SIDL.BaseInterface iobj
        integer*8 iobj
C       out bool retval
        logical retval
        end


C       
C       Check whether the object can support the specified interface or
C       class.  If the <code>SIDL</code> type name in <code>name</code>
C       is supported, then a reference to that object is returned with the
C       reference count incremented.  The callee will be responsible for
C       calling <code>deleteRef</code> on the returned object.  If
C       the specified type is not supported, then a null reference is
C       returned.
C       

        subroutine Hypre_IJParCSRVector_queryInt_f(self, name, retval)
        implicit none
C       in Hypre.IJParCSRVector self
        integer*8 self
C       in string name
        character*(*) name
C       out SIDL.BaseInterface retval
        integer*8 retval
        end


C       
C       Return whether this object is an instance of the specified type.
C       The string name must be the <code>SIDL</code> type name.  This
C       routine will return <code>true</code> if and only if a cast to
C       the string type name would succeed.
C       

        subroutine Hypre_IJParCSRVector_isType_f(self, name, retval)
        implicit none
C       in Hypre.IJParCSRVector self
        integer*8 self
C       in string name
        character*(*) name
C       out bool retval
        logical retval
        end


C       
C       Return the meta-data about the class implementing this interface.
C       

        subroutine Hypre_IJParCSRVector_getClassInfo_f(self, retval)
        implicit none
C       in Hypre.IJParCSRVector self
        integer*8 self
C       out SIDL.ClassInfo retval
        integer*8 retval
        end


C       
C       Set the MPI Communicator.
C       
C       

        subroutine Hypre_IJParCSRVector_SetCommunicator_f(self,
     &     mpi_comm, retval)
        implicit none
C       in Hypre.IJParCSRVector self
        integer*8 self
C       in opaque mpi_comm
        integer*8 mpi_comm
C       out int retval
        integer*4 retval
        end


C       
C       Prepare an object for setting coefficient values, whether for
C       the first time or subsequently.
C       
C       

        subroutine Hypre_IJParCSRVector_Initialize_f(self, retval)
        implicit none
C       in Hypre.IJParCSRVector self
        integer*8 self
C       out int retval
        integer*4 retval
        end


C       
C       Finalize the construction of an object before using, either
C       for the first time or on subsequent uses. {\tt Initialize}
C       and {\tt Assemble} always appear in a matched set, with
C       Initialize preceding Assemble. Values can only be set in
C       between a call to Initialize and Assemble.
C       
C       

        subroutine Hypre_IJParCSRVector_Assemble_f(self, retval)
        implicit none
C       in Hypre.IJParCSRVector self
        integer*8 self
C       out int retval
        integer*4 retval
        end


C       
C       The problem definition interface is a {\it builder} that
C       creates an object that contains the problem definition
C       information, e.g. a matrix. To perform subsequent operations
C       with that object, it must be returned from the problem
C       definition object. {\tt GetObject} performs this function.
C       At compile time, the type of the returned object is unknown.
C       Thus, the returned type is a SIDL.BaseInterface.
C       QueryInterface or Cast must be used on the returned object to
C       convert it into a known type.
C       
C       

        subroutine Hypre_IJParCSRVector_GetObject_f(self, A, retval)
        implicit none
C       in Hypre.IJParCSRVector self
        integer*8 self
C       out SIDL.BaseInterface A
        integer*8 A
C       out int retval
        integer*4 retval
        end


C       
C       Set the local range for a vector object.  Each process owns
C       some unique consecutive range of vector unknowns, indicated
C       by the global indices {\tt jlower} and {\tt jupper}.  The
C       data is required to be such that the value of {\tt jlower} on
C       any process $p$ be exactly one more than the value of {\tt
C       jupper} on process $p-1$.  Note that the first index of the
C       global vector may start with any integer value.  In
C       particular, one may use zero- or one-based indexing.
C       
C       Collective.
C       
C       RDF: Changed name from 'Create' (x)
C       
C       

        subroutine Hypre_IJParCSRVector_SetLocalRange_f(self, jlower,
     &     jupper, retval)
        implicit none
C       in Hypre.IJParCSRVector self
        integer*8 self
C       in int jlower
        integer*4 jlower
C       in int jupper
        integer*4 jupper
C       out int retval
        integer*4 retval
        end


C       
C       Sets values in vector.  The arrays {\tt values} and {\tt
C       indices} are of dimension {\tt nvalues} and contain the
C       vector values to be set and the corresponding global vector
C       indices, respectively.  Erases any previous values at the
C       specified locations and replaces them with new ones.
C       
C       Not collective.
C       
C       

        subroutine Hypre_IJParCSRVector_SetValues_f(self, nvalues,
     &     indices, values, retval)
        implicit none
C       in Hypre.IJParCSRVector self
        integer*8 self
C       in int nvalues
        integer*4 nvalues
C       in array<int> indices
        integer*8 indices
C       in array<double> values
        integer*8 values
C       out int retval
        integer*4 retval
        end


C       
C       Adds to values in vector.  Usage details are analogous to
C       {\tt SetValues}.
C       
C       Not collective.
C       
C       

        subroutine Hypre_IJParCSRVector_AddToValues_f(self, nvalues,
     &     indices, values, retval)
        implicit none
C       in Hypre.IJParCSRVector self
        integer*8 self
C       in int nvalues
        integer*4 nvalues
C       in array<int> indices
        integer*8 indices
C       in array<double> values
        integer*8 values
C       out int retval
        integer*4 retval
        end


C       
C       Returns range of the part of the vector owned by this
C       processor.
C       
C       RDF: New (x)
C       
C       

        subroutine Hypre_IJParCSRVector_GetLocalRange_f(self, jlower,
     &     jupper, retval)
        implicit none
C       in Hypre.IJParCSRVector self
        integer*8 self
C       out int jlower
        integer*4 jlower
C       out int jupper
        integer*4 jupper
C       out int retval
        integer*4 retval
        end


C       
C       Gets values in vector.  Usage details are analogous to {\tt
C       SetValues}.
C       
C       Not collective.
C       
C       RDF: New (x)
C       
C       

        subroutine Hypre_IJParCSRVector_GetValues_f(self, nvalues,
     &     indices, values, retval)
        implicit none
C       in Hypre.IJParCSRVector self
        integer*8 self
C       in int nvalues
        integer*4 nvalues
C       in array<int> indices
        integer*8 indices
C       inout array<double> values
        integer*8 values
C       out int retval
        integer*4 retval
        end


C       
C       Print the vector to file.  This is mainly for debugging
C       purposes.
C       
C       

        subroutine Hypre_IJParCSRVector_Print_f(self, filename, retval)
        implicit none
C       in Hypre.IJParCSRVector self
        integer*8 self
C       in string filename
        character*(*) filename
C       out int retval
        integer*4 retval
        end


C       
C       Read the vector from file.  This is mainly for debugging
C       purposes.
C       
C       

        subroutine Hypre_IJParCSRVector_Read_f(self, filename, comm,
     &     retval)
        implicit none
C       in Hypre.IJParCSRVector self
        integer*8 self
C       in string filename
        character*(*) filename
C       in opaque comm
        integer*8 comm
C       out int retval
        integer*4 retval
        end


C       
C       Set {\tt self} to 0.
C       
C       

        subroutine Hypre_IJParCSRVector_Clear_f(self, retval)
        implicit none
C       in Hypre.IJParCSRVector self
        integer*8 self
C       out int retval
        integer*4 retval
        end


C       
C       Copy x into {\tt self}.
C       
C       

        subroutine Hypre_IJParCSRVector_Copy_f(self, x, retval)
        implicit none
C       in Hypre.IJParCSRVector self
        integer*8 self
C       in Hypre.Vector x
        integer*8 x
C       out int retval
        integer*4 retval
        end


C       
C       Create an {\tt x} compatible with {\tt self}.
C       
C       NOTE: When this method is used in an inherited class, the
C       cloned {\tt Vector} object can be cast to an object with the
C       inherited class type.
C       
C       

        subroutine Hypre_IJParCSRVector_Clone_f(self, x, retval)
        implicit none
C       in Hypre.IJParCSRVector self
        integer*8 self
C       out Hypre.Vector x
        integer*8 x
C       out int retval
        integer*4 retval
        end


C       
C       Scale {\self} by {\tt a}.
C       
C       

        subroutine Hypre_IJParCSRVector_Scale_f(self, a, retval)
        implicit none
C       in Hypre.IJParCSRVector self
        integer*8 self
C       in double a
        double precision a
C       out int retval
        integer*4 retval
        end


C       
C       Compute {\tt d}, the inner-product of {\tt self} and {\tt x}.
C       
C       

        subroutine Hypre_IJParCSRVector_Dot_f(self, x, d, retval)
        implicit none
C       in Hypre.IJParCSRVector self
        integer*8 self
C       in Hypre.Vector x
        integer*8 x
C       out double d
        double precision d
C       out int retval
        integer*4 retval
        end


C       
C       Add {\tt a}*{\tt x} to {\tt self}.
C       
C       

        subroutine Hypre_IJParCSRVector_Axpy_f(self, a, x, retval)
        implicit none
C       in Hypre.IJParCSRVector self
        integer*8 self
C       in double a
        double precision a
C       in Hypre.Vector x
        integer*8 x
C       out int retval
        integer*4 retval
        end
