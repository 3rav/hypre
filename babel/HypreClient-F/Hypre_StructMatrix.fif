C       
C       File:          Hypre_StructMatrix_Impl.f
C       Symbol:        Hypre.StructMatrix-v0.1.7
C       Symbol Type:   class
C       Babel Version: 0.8.0
C       SIDL Created:  20030306 17:05:23 PST
C       Generated:     20030306 17:05:26 PST
C       Description:   Client-side documentation text for Hypre.StructMatrix
C       
C       WARNING: Automatically generated; changes will be lost
C       
C       babel-version = 0.8.0
C       source-line   = 1134
C       source-url    = file:/home/falgout/linear_solvers/babel/Interfaces.idl
C       

        THIS FILE IS DOCUMENTATION - DO NOT COMPILE IT!

C       
C       Symbol "Hypre.StructMatrix" (version 0.1.7)
C       
C       A single class that implements both a build interface and an
C       operator interface. It returns itself for GetConstructedObject.
C       
C       




C       
C       Create an instance of class Hypre.StructMatrix
C       

        subroutine Hypre_StructMatrix__create_f(retval)
        implicit none
C       out Hypre.StructMatrix retval
        integer*8 retval
        end


C       
C       Cast method for interface and class type conversions.
C       

        subroutine Hypre_StructMatrix__cast_f(self, name, retval)
        implicit none
C       in Hypre.StructMatrix self
        integer*8 self
C       in string name
        character*(*) name
C       out opaque retval
        integer*8 retval
        end


C       
C       <p>
C       Add one to the intrinsic reference count in the underlying object.
C       Object in <code>SIDL</code> have an intrinsic reference count.
C       Objects continue to exist as long as the reference count is
C       positive. Clients should call this method whenever they
C       create another ongoing reference to an object or interface.
C       </p>
C       <p>
C       This does not have a return value because there is no language
C       independent type that can refer to an interface or a
C       class.
C       </p>
C       

        subroutine Hypre_StructMatrix_addRef_f(self)
        implicit none
C       in Hypre.StructMatrix self
        integer*8 self
        end


C       
C       Decrease by one the intrinsic reference count in the underlying
C       object, and delete the object if the reference is non-positive.
C       Objects in <code>SIDL</code> have an intrinsic reference count.
C       Clients should call this method whenever they remove a
C       reference to an object or interface.
C       

        subroutine Hypre_StructMatrix_deleteRef_f(self)
        implicit none
C       in Hypre.StructMatrix self
        integer*8 self
        end


C       
C       Return true if and only if <code>obj</code> refers to the same
C       object as this object.
C       

        subroutine Hypre_StructMatrix_isSame_f(self, iobj, retval)
        implicit none
C       in Hypre.StructMatrix self
        integer*8 self
C       in SIDL.BaseInterface iobj
        integer*8 iobj
C       out bool retval
        logical retval
        end


C       
C       Check whether the object can support the specified interface or
C       class.  If the <code>SIDL</code> type name in <code>name</code>
C       is supported, then a reference to that object is returned with the
C       reference count incremented.  The callee will be responsible for
C       calling <code>deleteRef</code> on the returned object.  If
C       the specified type is not supported, then a null reference is
C       returned.
C       

        subroutine Hypre_StructMatrix_queryInt_f(self, name, retval)
        implicit none
C       in Hypre.StructMatrix self
        integer*8 self
C       in string name
        character*(*) name
C       out SIDL.BaseInterface retval
        integer*8 retval
        end


C       
C       Return whether this object is an instance of the specified type.
C       The string name must be the <code>SIDL</code> type name.  This
C       routine will return <code>true</code> if and only if a cast to
C       the string type name would succeed.
C       

        subroutine Hypre_StructMatrix_isType_f(self, name, retval)
        implicit none
C       in Hypre.StructMatrix self
        integer*8 self
C       in string name
        character*(*) name
C       out bool retval
        logical retval
        end


C       
C       Return the meta-data about the class implementing this interface.
C       

        subroutine Hypre_StructMatrix_getClassInfo_f(self, retval)
        implicit none
C       in Hypre.StructMatrix self
        integer*8 self
C       out SIDL.ClassInfo retval
        integer*8 retval
        end


C       
C       Set the MPI Communicator.
C       
C       

        subroutine Hypre_StructMatrix_SetCommunicator_f(self, mpi_comm,
     &     retval)
        implicit none
C       in Hypre.StructMatrix self
        integer*8 self
C       in opaque mpi_comm
        integer*8 mpi_comm
C       out int retval
        integer*4 retval
        end


C       
C       Prepare an object for setting coefficient values, whether for
C       the first time or subsequently.
C       
C       

        subroutine Hypre_StructMatrix_Initialize_f(self, retval)
        implicit none
C       in Hypre.StructMatrix self
        integer*8 self
C       out int retval
        integer*4 retval
        end


C       
C       Finalize the construction of an object before using, either
C       for the first time or on subsequent uses. {\tt Initialize}
C       and {\tt Assemble} always appear in a matched set, with
C       Initialize preceding Assemble. Values can only be set in
C       between a call to Initialize and Assemble.
C       
C       

        subroutine Hypre_StructMatrix_Assemble_f(self, retval)
        implicit none
C       in Hypre.StructMatrix self
        integer*8 self
C       out int retval
        integer*4 retval
        end


C       
C       The problem definition interface is a {\it builder} that
C       creates an object that contains the problem definition
C       information, e.g. a matrix. To perform subsequent operations
C       with that object, it must be returned from the problem
C       definition object. {\tt GetObject} performs this function.
C       At compile time, the type of the returned object is unknown.
C       Thus, the returned type is a SIDL.BaseInterface.
C       QueryInterface or Cast must be used on the returned object to
C       convert it into a known type.
C       
C       

        subroutine Hypre_StructMatrix_GetObject_f(self, A, retval)
        implicit none
C       in Hypre.StructMatrix self
        integer*8 self
C       out SIDL.BaseInterface A
        integer*8 A
C       out int retval
        integer*4 retval
        end


C       
C       Method:  SetGrid[]
C       

        subroutine Hypre_StructMatrix_SetGrid_f(self, grid, retval)
        implicit none
C       in Hypre.StructMatrix self
        integer*8 self
C       in Hypre.StructGrid grid
        integer*8 grid
C       out int retval
        integer*4 retval
        end


C       
C       Method:  SetStencil[]
C       

        subroutine Hypre_StructMatrix_SetStencil_f(self, stencil,
     &     retval)
        implicit none
C       in Hypre.StructMatrix self
        integer*8 self
C       in Hypre.StructStencil stencil
        integer*8 stencil
C       out int retval
        integer*4 retval
        end


C       
C       Method:  SetValues[]
C       

        subroutine Hypre_StructMatrix_SetValues_f(self, index,
     &     num_stencil_indices, stencil_indices, values, retval)
        implicit none
C       in Hypre.StructMatrix self
        integer*8 self
C       in array<int> index
        integer*8 index
C       in int num_stencil_indices
        integer*4 num_stencil_indices
C       in array<int> stencil_indices
        integer*8 stencil_indices
C       in array<double> values
        integer*8 values
C       out int retval
        integer*4 retval
        end


C       
C       Method:  SetBoxValues[]
C       

        subroutine Hypre_StructMatrix_SetBoxValues_f(self, ilower,
     &     iupper, num_stencil_indices, stencil_indices, values, retval)
        implicit none
C       in Hypre.StructMatrix self
        integer*8 self
C       in array<int> ilower
        integer*8 ilower
C       in array<int> iupper
        integer*8 iupper
C       in int num_stencil_indices
        integer*4 num_stencil_indices
C       in array<int> stencil_indices
        integer*8 stencil_indices
C       in array<double> values
        integer*8 values
C       out int retval
        integer*4 retval
        end


C       
C       Method:  SetNumGhost[]
C       

        subroutine Hypre_StructMatrix_SetNumGhost_f(self, num_ghost,
     &     retval)
        implicit none
C       in Hypre.StructMatrix self
        integer*8 self
C       in array<int> num_ghost
        integer*8 num_ghost
C       out int retval
        integer*4 retval
        end


C       
C       Method:  SetSymmetric[]
C       

        subroutine Hypre_StructMatrix_SetSymmetric_f(self, symmetric,
     &     retval)
        implicit none
C       in Hypre.StructMatrix self
        integer*8 self
C       in int symmetric
        integer*4 symmetric
C       out int retval
        integer*4 retval
        end


C       
C       Set the int parameter associated with {\tt name}.
C       
C       

        subroutine Hypre_StructMatrix_SetIntParameter_f(self, name,
     &     value, retval)
        implicit none
C       in Hypre.StructMatrix self
        integer*8 self
C       in string name
        character*(*) name
C       in int value
        integer*4 value
C       out int retval
        integer*4 retval
        end


C       
C       Set the double parameter associated with {\tt name}.
C       
C       

        subroutine Hypre_StructMatrix_SetDoubleParameter_f(self, name,
     &     value, retval)
        implicit none
C       in Hypre.StructMatrix self
        integer*8 self
C       in string name
        character*(*) name
C       in double value
        double precision value
C       out int retval
        integer*4 retval
        end


C       
C       Set the string parameter associated with {\tt name}.
C       
C       

        subroutine Hypre_StructMatrix_SetStringParameter_f(self, name,
     &     value, retval)
        implicit none
C       in Hypre.StructMatrix self
        integer*8 self
C       in string name
        character*(*) name
C       in string value
        character*(*) value
C       out int retval
        integer*4 retval
        end


C       
C       Set the int array parameter associated with {\tt name}.
C       
C       

        subroutine Hypre_StructMatrix_SetIntArrayParameter_f(self, name,
     &     value, retval)
        implicit none
C       in Hypre.StructMatrix self
        integer*8 self
C       in string name
        character*(*) name
C       in array<int> value
        integer*8 value
C       out int retval
        integer*4 retval
        end


C       
C       Set the double array parameter associated with {\tt name}.
C       
C       

        subroutine Hypre_StructMatrix_SetDoubleArrayParameter_f(self,
     &     name, value, retval)
        implicit none
C       in Hypre.StructMatrix self
        integer*8 self
C       in string name
        character*(*) name
C       in array<double> value
        integer*8 value
C       out int retval
        integer*4 retval
        end


C       
C       Set the int parameter associated with {\tt name}.
C       
C       

        subroutine Hypre_StructMatrix_GetIntValue_f(self, name, value,
     &     retval)
        implicit none
C       in Hypre.StructMatrix self
        integer*8 self
C       in string name
        character*(*) name
C       out int value
        integer*4 value
C       out int retval
        integer*4 retval
        end


C       
C       Get the double parameter associated with {\tt name}.
C       
C       

        subroutine Hypre_StructMatrix_GetDoubleValue_f(self, name,
     &     value, retval)
        implicit none
C       in Hypre.StructMatrix self
        integer*8 self
C       in string name
        character*(*) name
C       out double value
        double precision value
C       out int retval
        integer*4 retval
        end


C       
C       (Optional) Do any preprocessing that may be necessary in
C       order to execute {\tt Apply}.
C       
C       

        subroutine Hypre_StructMatrix_Setup_f(self, b, x, retval)
        implicit none
C       in Hypre.StructMatrix self
        integer*8 self
C       in Hypre.Vector b
        integer*8 b
C       in Hypre.Vector x
        integer*8 x
C       out int retval
        integer*4 retval
        end


C       
C       Apply the operator to {\tt b}, returning {\tt x}.
C       
C       

        subroutine Hypre_StructMatrix_Apply_f(self, b, x, retval)
        implicit none
C       in Hypre.StructMatrix self
        integer*8 self
C       in Hypre.Vector b
        integer*8 b
C       inout Hypre.Vector x
        integer*8 x
C       out int retval
        integer*4 retval
        end
