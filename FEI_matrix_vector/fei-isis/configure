#!/bin/sh
echo " "
echo "FEI configure, generating Makefile options in make.options."
outfile=make.options
echo " "
echo " "
cat << \COMMENTTEXT >$outfile

#############################################################
# This file is generated by the fei-isis configure script. 
# Variables to be used in the Makefile.
#############################################################

COMMENTTEXT

# init and load yes or no defaulting script.
response=""
. ./util/yes_or_no.sh

FEI_ROOT=`pwd`
echo "FEI_ROOT=`pwd`" >> $outfile

echo "This script will set the parameters required to build"
echo "and execute FEI-isis on this system."
echo "MPI is required."
echo " "

shport=fei-drivers/runPORT.sh
/bin/rm -rf $shport
#############################################################
# Set machine architecture variable.
ISIS_ARCH=`util/tarch`
echo "ISIS_ARCH=`util/tarch`" >> $outfile
echo "ISIS_ARCH=`util/tarch`" > $shport

echo " "
echo "FEI_ROOT = $FEI_ROOT"
echo "ISIS_ARCH = $ISIS_ARCH"
echo " "

yes_or_no "Are you cross-compiling (y/n)" no pad
crosscompiling=$response
if [ $crosscompiling = y ] ; then
    echo "Assuming TFLOP (more machines will be added here later)"
fi

echo " "
yes_or_no "Build for parallel (with MPI) execution (y/n) " yes pad
if [ $response = y ] ; then
   serchoice=p
else
   serchoice=s
fi

echo " "

if [ $serchoice = p ] ; then
   ISIS_TARGET=PLL
   echo "ISIS_TARGET=PLL" >> $outfile;
   echo "Building for parallel (with MPI) execution."
   echo " "
else
   ISIS_TARGET=SER
   echo "ISIS_TARGET=SER" >> $outfile;
   echo "Building for serial execution."
   echo "NOTE: This REQUIRES that the solver library (ISIS++) was"
   echo "also built for purely serial execution."
   echo " "
fi

#############################################################

##############################################################
# Get ISIS_ROOT
haveisis=0
if [ -f /usr/local/isis++/isis-mpi.h ] ; then
	ISIS_ROOT=/usr/local/isis++
	haveisis=1
fi
if [ $haveisis = 0 ] ; then
	if [ -f `pwd`/../isis/isis-mpi.h ] ; then
		ISIS_ROOT=`pwd`/../isis
		haveisis=1
	fi
fi
if [ $haveisis = 0 ] ; then
    echo "Enter the location where isis++ is installed or built."
	echo -n "(The normal /usr/local/isis++ is missing):"
    read ISIS_ROOT
	if ! [ -d $ISIS_ROOT ] ; then
    	echo "ISIS_ROOT is not correct. try again."
		exit 1
	fi
	if ! [ -f $ISIS_ROOT/isis-mpi.h ] ; then
    	echo "$ISIS_ROOT/isis-mpi.h does not exist. try again."
		exit 2
	fi
	haveisis=1
fi
echo "ISIS_ROOT=$ISIS_ROOT" >> $outfile
echo "ISIS_ROOT = $ISIS_ROOT"
##############################################################


#############################################################
# Search for and set LAPACK and BLAS paths.
if [ -f /usr/local/lib/liblapack.a ]; then
	echo "Found lapack in /usr/local/lib"
	echo "Assume blas is same place as lapack."
	LAPACK_PATH=/usr/local/lib
elif [ -f /usr/lib/liblapack.a ]; then
    echo "Found lapack in /usr/lib"
    echo "Assume blas is same place as lapack."
    LAPACK_PATH=/usr/lib
elif [ $ISIS_ARCH = meiko ] ; then
	echo "Using native LAPACK lib."
    LAPACK_PATH=.
elif [ $ISIS_ARCH = CRAY ] ; then
	echo "Using native LAPACK lib."
    LAPACK_PATH=.
else
	echo "Configure script didn't find lapack."
	echo -n "Enter path to lapack lib: "
	read lincpath
	LAPACK_PATH=$lincpath
	if [ -z $lincpath ] ; then
		LAPACK_PATH=.
	fi
fi


##############################################################
# Set the basic libraries to be linked with.

if [ $ISIS_ARCH = alpha ] ; then
    libraries="-llapack -lblas -lUfor -lfor -lm_4sqrt -lm -lots"
fi

if [ $ISIS_ARCH = CRAY ] ; then
    libraries="-lm"
    LDFLAGS="-L/opt/ctl/craylibs_m/craylibs_m"
fi

if [ $ISIS_ARCH = hpux ] ; then
    libraries="-llapack -lblas -lm -lV3"
fi

if [ $ISIS_ARCH = LINUX ] ; then
    libraries="-llapack -lblas -lf2c -lm"
fi

if [ $ISIS_ARCH = IRIX ] ; then
    libraries="-llapack -lblas -lF77 -lftn -lm"
fi

if [ $ISIS_ARCH = IRIX64 ] ; then
    libraries="-lcomplib.sgimath_mp -llapack -lblas -lftn -lm"
fi

if [ $ISIS_ARCH = rs6000 ] ; then
    libraries="-llapack -lblas -lm -lxlf90"
fi

if [ $ISIS_ARCH = solaris ] ; then
    thismachine=`hostname`
    if [ $thismachine = sasn100 ] ; then
       echo "Using TFLOP libraries"
       libraries="-llapack -lkmath -lmpi -lmach -lm -lf"
    elif [ $crosscompiling = y ] ; then
       echo "Using TFLOP libraries"
       libraries="-llapack -lkmath -lmpi -lmach -lm -lf"
    else
       LDFLAGS="-L/opt/SUNWspro/SC4.2/lib"
       libraries="-llapack -lblas -lF77 -lM77 -lsunmath -lm -lsocket -lnsl"
    fi
fi

if [ $ISIS_ARCH = meiko ] ; then
    libraries="-lsunperf -lF77 -lM77 -lm -lsunmath -lmpi -lew -lelan"
    LDFLAGS="-L/opt/MEIKOcs2/lib -L/opt/SUNWspro/SC4.0/lib"
fi

LDFLAGS="$LDFLAGS -L$FEI_ROOT/lib/$ISIS_ARCH -L$ISIS_ROOT/lib/$ISIS_ARCH -L$LAPACK_PATH"

##############################################################


##############################################################
echo " "
havepilut=''
yes_or_no "Enable use of the HYPRE library (for PILUT) (y/n)" no pad
HYPRE=disabled
HYPRE_INCLUDE_PATH=-I.
HYPRE_LIB_PATH=-L.
choice=$response
if [ $choice = y ] ; then
    HYPRE_LIB="-lHYPREDistributedMatrixPilutSolver -lHYPREDistributedMatrix -lHYPRE_memory  -lHYPRE_timing"
    HYPRE=enabled
    havepilut='pilut'

    echo "Enter path to HYPRE include file:"
    read hyprepath
    HYPRE_INCLUDE_PATH=-I$hyprepath
    echo "Enter path to HYPRE library (e.g. /usr/apps/hypre):"
    read HYPREpath
    HYPRE_LIB_PATH="-L$HYPREpath/utilities -L$HYPREpath/distributed_matrix -L$HYPREpath/distributed_linear_solvers/pilut"
fi
echo "HYPRE=$HYPRE" >> $outfile
echo "#HAVE_PILUT=pilut" >> $outfile
echo "HAVE_PILUT=$havepilut" >> $outfile
echo "HYPRE_INCLUDE_PATH=$HYPRE_INCLUDE_PATH" >> $outfile
##############################################################

##############################################################
if [ $serchoice = p ] ; then
    if [ $ISIS_ARCH = IRIX64 ] ; then
        echo '# You need to delete either -lcomplib.sgimath_mp or -llapack -lblas' >>$outfile
        echo '# from libraries_mpi definition below' >>$outfile
    fi
    libraries_mpi="-lfei_isis -lisis_mpi $AZTEC_LIB $SuperLU_LIB_PATH $SPARSKIT2_LIB $BPKIT_LIB $HYPRE_LIB $AMG_LIB $libraries -lmpi"
    echo "libraries_mpi=$libraries_mpi" >> $outfile
else
    libraries_mpi="-lfei_isis -lisis_ser $SuperLU_LIB_PATH $SPARSKIT2_LIB $BPKIT_LIB $HYPRE_LIB $AMG_LIB $libraries"
    echo "libraries_mpi=$libraries_mpi" >> $outfile
fi
if [ $ISIS_ARCH = IRIX64 ] ; then
    echo 'EDIT make.options to set final blas options'
    echo '# You need to delete either -lcomplib.sgimath or -llapack -lblas' >>$outfile
    echo '# from libraries definition below' >>$outfile
fi

##############################################################



##############################################################
# Select compiler type.

echo -n "Build using GNU, native, Portland Group or KCC compiler? (g/n/p/k) "
read choice
if test -z "$choice" 
then
  choice=n
  echo "native assumed";
fi
yes_or_no "Build in debugging mode (y/n)" yes pad
debugging=$response
echo $debugging
if [ $choice = g ] ; then 
   echo "GNU gcc and g++ (assuming version 2.7.2 or later)"
   echo "ISIS_BOOL=-DBOOL_SUPPORTED" >> $outfile
   echo "C=gcc" >> $outfile;
   echo "CPP=g++" >> $outfile;
   if [ $debugging = n ] ; then
      echo "OPT=-O3" >> $outfile;
      echo "LD_OPT=-O3" >> $outfile;
      echo "CFLAGS=-O3" >> $outfile;
   else
      echo "OPT=-g" >> $outfile;
      echo "LD_OPT=-g" >> $outfile;
      echo "CFLAGS=-g" >> $outfile;
   fi
elif [ $choice = n ] ; then
   echo "Configuring for native compiler."
   if [ $ISIS_ARCH = alpha ] ; then
      echo "Configuring for $ISIS_ARCH native compiler."
      echo "C=cc" >> $outfile
      echo "CPP=cxx" >> $outfile
      if [ $debugging = n ] ; then
         echo "OPT=-O3 -Olimit 800" >> $outfile;
         echo "LD_OPT=-O3 -Olimit 800" >> $outfile;
         echo "CFLAGS=-O3" >> $outfile;
      else
         echo "OPT=-g" >> $outfile;
         echo "LD_OPT=-g" >> $outfile;
         echo "CFLAGS=-g" >> $outfile;
      fi
   fi
   if [ $ISIS_ARCH = CRAY ] ; then
      echo "Detected CRAY architecture."
      echo "Is it a T3D or T3E? (d/e)"
      read choice
      if [ -f /opt/ctl/craylibs/craylibs/include/fortran.h ] ; then
         echo "Found fortran.h in /opt/ctl/craylibs/craylibs/include"
         FPATH="/opt/ctl/craylibs/craylibs/include"
      else
         echo "Enter include path for fortran.h"
         read FPATH
      fi
      echo "FPATH=$FPATH" >> $outfile
      if [ $choice = d ] ; then
   
         echo "Be sure to 'setenv TARGET cray-t3d' before making."
         echo "C=cc" >> $outfile
         echo "CPP=CC" >> $outfile
         if [ $debugging = n ] ; then
            echo "OPT=-O3 -D__t3x" >> $outfile;
            echo "LD_OPT=-O1 -D__t3d" >> $outfile;
            echo "CFLAGS=-O3 -D__t3d" >> $outfile;
         else
            echo "OPT=-g -D__t3x" >> $outfile;
            echo "LD_OPT=-g -D__t3d" >> $outfile;
            echo "CFLAGS=-g -D__t3d" >> $outfile;
         fi
      elif [ $choice = e ] ; then
         echo "Building T3E lib..."
         echo "C=cc" >> $outfile
         echo "CPP=CC" >> $outfile
         if [ $debugging = n ] ; then
            echo "OPT=-O3 -D__t3x" >> $outfile;
            echo "LD_OPT=-O1 -D__t3e" >> $outfile;
            echo "CFLAGS=-O3 -D__t3e" >> $outfile;
         else
            echo "OPT=-g -D__t3x" >> $outfile;
            echo "LD_OPT=-g -D__t3e" >> $outfile;
            echo "CFLAGS=-g -D__t3e" >> $outfile;
         fi
      else
         echo "CRAY architecture type entered not recognized."
         echo "Must enter d or e."
      fi
   fi
   if [ $ISIS_ARCH = hpux ] ; then
      echo "Configuring for $ISIS_ARCH native compiler."
      echo "C=cc" >> $outfile
      echo "CPP=CC" >> $outfile
      if [ $debugging = n ] ; then
         echo "OPT=+O3" >> $outfile;
         echo "LD_OPT=+O3" >> $outfile;
         echo "CFLAGS=-O" >> $outfile;
      else
         echo "OPT=-g" >> $outfile;
         echo "LD_OPT=-g" >> $outfile;
         echo "CFLAGS=-g" >> $outfile;
      fi
   fi
   if [ $ISIS_ARCH = rs6000 ] ; then
      echo "Configuring for $ISIS_ARCH native compiler."
      echo "C=mpcc" >> $outfile
      echo "CPP=mpCC" >> $outfile
      if [ $debugging = n ] ; then
         echo "OPT=-O2 -D__rs6000" >> $outfile;
         echo "LD_OPT=-O2 -D__rs6000" >> $outfile;
         echo "CFLAGS=-O2 -D__rs6000" >> $outfile;
      else
         echo "OPT=-g -D__rs6000" >> $outfile;
         echo "LD_OPT=-g -D__rs6000" >> $outfile;
         echo "CFLAGS=-g -D__rs6000" >> $outfile;
      fi
   fi
   if [ $ISIS_ARCH = solaris ] ; then
      echo "Configuring for $ISIS_ARCH native compiler."
      echo "C=cc" >> $outfile
      echo "CPP=CC" >> $outfile
      if [ $debugging = n ] ; then
         echo "OPT=-O2" >> $outfile;
         echo "LD_OPT=-O2" >> $outfile;
         echo "CFLAGS=-O2" >> $outfile;
      else
         echo "OPT=-g" >> $outfile;
         echo "LD_OPT=-g" >> $outfile;
         echo "CFLAGS=-g" >> $outfile;
      fi
   fi
   if [ $ISIS_ARCH = IRIX ] ; then
      echo "Configuring for $ISIS_ARCH native compiler."
      echo "C=cc" >> $outfile
      echo "CPP=CC" >> $outfile
      if [ $debugging = n ] ; then
         echo "OPT=-O2 -mips2 -Olimit 900" >> $outfile;
         echo "LD_OPT=-O2 -mips2 -Olimit 900" >> $outfile;
         echo "CFLAGS=-O2" >> $outfile;
      else
         echo "OPT=-g" >> $outfile;
         echo "LD_OPT=-g" >> $outfile;
         echo "CFLAGS=-g" >> $outfile;
      fi
   fi
   if [ $ISIS_ARCH = IRIX64 ] ; then
      echo "Configuring for $ISIS_ARCH native compiler."
      echo "C=cc" >> $outfile
      echo "CPP=CC" >> $outfile
      if [ $debugging = n ] ; then
         echo "OPT=-O2 -32" >> $outfile;
         echo "LD_OPT=-O2 -32" >> $outfile;
         echo "CFLAGS=-O2 -32" >> $outfile;
      else
         echo "OPT=-g -32" >> $outfile;
         echo "LD_OPT=-g -32" >> $outfile;
         echo "CFLAGS=-g -32" >> $outfile;
      fi
   fi
   if [ $ISIS_ARCH = LINUX ] ; then
      echo "Currently for $ISIS_ARCH machines, no native compilers supported."
      echo "Configuring for GNU gcc and g++ (assuming version 2.7.2 or later)."
      echo "C=gcc" >> $outfile;
      echo "CPP=g++" >> $outfile;
      echo "ISIS_BOOL=-DBOOL_SUPPORTED" >> $outfile
      if [ $debugging = n ] ; then
         echo "OPT=-O3" >> $outfile;
         echo "LD_OPT=-O3" >> $outfile;
         echo "CFLAGS=-O3" >> $outfile;
      else
         echo "OPT=-g" >> $outfile;
         echo "LD_OPT=-g" >> $outfile;
         echo "CFLAGS=-g" >> $outfile;
      fi
   fi
elif [ $choice = p ] ; then
   echo "Configuring for Portland Group's pgcc and pgCC."
   echo "ISIS_BOOL=-DBOOL_SUPPORTED" >> $outfile
   if [ $crosscompiling = y ] ; then
       echo "C=icc" >> $outfile
       echo "CPP=iCC" >> $outfile
       if [ $debugging = n ] ; then
          echo "OPT=-cougar -O2 -tall" >> $outfile;
          echo "LD_OPT=-cougar -O2 -tnone" >> $outfile;
          echo "CFLAGS=-cougar -O2" >> $outfile;
       else
          echo "OPT=-cougar -g -tall" >> $outfile;
          echo "LD_OPT=-cougar -g -tnone" >> $outfile;
          echo "CFLAGS=-cougar -g" >> $outfile;
       fi
   else
       echo "C=pgcc" >> $outfile
       echo "CPP=pgCC" >> $outfile
       if [ $debugging = n ] ; then
          echo "OPT=-cougar -O2" >> $outfile;
          echo "LD_OPT=-cougar -O2" >> $outfile;
          echo "CFLAGS=-cougar -O2" >> $outfile;
       else
          echo "OPT=-cougar -g" >> $outfile;
          echo "LD_OPT=-cougar -g" >> $outfile;
          echo "CFLAGS=-cougar -g" >> $outfile;
       fi
   fi
elif [ $choice = k ] ; then
   echo "Configuring for KAI compiler."
   if [ $ISIS_ARCH = alpha ] ; then
	  echo "ISIS_BOOL=-DBOOL_SUPPORTED" >> $outfile
      echo "Configuring for $ISIS_ARCH KAI C++ compiler."
      echo "C=cc" >> $outfile
      echo "CPP=KCC" >> $outfile
      if [ $debugging = n ] ; then
         echo "OPT=-migrate -O4 +K3 -Olimit 1200" >> $outfile;
         echo "LD_OPT=-migrate -O4 +K3 -Olimit 1200" >> $outfile;
         echo "CFLAGS=-O3" >> $outfile;
      else
         echo "OPT=-g" >> $outfile;
         echo "LD_OPT=-g" >> $outfile;
         echo "CFLAGS=-g" >> $outfile;
      fi
   fi
   if [ $ISIS_ARCH = CRAY ] ; then
      echo "ISIS_BOOL=-DBOOL_SUPPORTED" >> $outfile
      echo "Detected CRAY architecture, assuming T3D or T3E."
      echo "Is it a T3D or T3E? (d/e)"
      read choice
      if [ -f /opt/ctl/craylibs/craylibs/include/fortran.h ] ; then
         echo "Found fortran.h in /opt/ctl/craylibs/craylibs/include"
         FPATH="/opt/ctl/craylibs/craylibs/include"
      else
         echo "Enter include path for fortran.h"
         read FPATH
      fi
      echo "FPATH=$FPATH" >> $outfile
      if [ $choice = d ] ; then
         echo "Building T3D lib..."
         echo "Be sure to 'setenv TARGET cray-t3d' before making."
         echo "C=cc" >> $outfile
         echo "CPP=KCC" >> $outfile
         if [ $debugging = n ] ; then
            echo "OPT=-O3 +K3 -D__t3x" >> $outfile;
            echo "LD_OPT=-O1 -D__t3d" >> $outfile;
            echo "CFLAGS=-O3 -D__t3d" >> $outfile;
         else
            echo "OPT=-g -D__t3x" >> $outfile;
            echo "LD_OPT=-g -D__t3d" >> $outfile;
            echo "CFLAGS=-g -D__t3d" >> $outfile;
         fi
      elif [ $choice = e ] ; then
         echo "Building T3E lib..."
         echo "C=cc" >> $outfile
         echo "CPP=KCC" >> $outfile
         if [ $debugging = n ] ; then
            echo "OPT=-O3 +K3 -D__t3x" >> $outfile;
            echo "LD_OPT=-O3 +K3 -D__t3e" >> $outfile;
            echo "CFLAGS=-O3 -D__t3e" >> $outfile;
         else
            echo "OPT=-g -D__t3x" >> $outfile;
            echo "LD_OPT=-g -D__t3e" >> $outfile;
            echo "CFLAGS=-g -D__t3e" >> $outfile;
         fi
      else
         echo "CRAY architecture type entered not recognized."
         echo "Must enter d or e."
      fi
   fi
   if [ $ISIS_ARCH = IRIX ] ; then
      echo "Configuring for $ISIS_ARCH KAI C++ compiler."
      echo "C=cc" >> $outfile
      echo "CPP=KCC" >> $outfile
      if [ $debugging = n ] ; then
         echo "OPT=-O2" >> $outfile;
         echo "LD_OPT=-O2" >> $outfile;
         echo "CFLAGS=-O3" >> $outfile;
      else
         echo "OPT=-g" >> $outfile;
         echo "LD_OPT=-g" >> $outfile;
         echo "CFLAGS=-g" >> $outfile;
      fi
   fi
   if [ $ISIS_ARCH = meiko ] ; then
      echo "ISIS_BOOL=-DBOOL_SUPPORTED" >> $outfile
      echo "Configuring for $ISIS_ARCH KAI C++ compiler."
      echo "C=cc" >> $outfile
      echo "CPP=KCC" >> $outfile
      if [ $debugging = n ] ; then
         echo "OPT=-O2" >> $outfile;
         echo "LD_OPT=-O2" >> $outfile;
         echo "CFLAGS=-O3" >> $outfile;
      else
         echo "OPT=-g" >> $outfile;
         echo "LD_OPT=-g" >> $outfile;
         echo "CFLAGS=-g" >> $outfile;
      fi
   fi
else
   echo "No compiler selected -- configure failed."
   exit
fi





##############################################################
#Get the MPI paths if configuring for parallel use.

MPI_INCLUDE=.
MPI_LIB=.
MPI_ROOT=.

if [ $serchoice = p ]; then
   if [ $ISIS_ARCH = CRAY ] ; then
      if [ -f /usr/include/mpp/mpi.h ]; then
         echo "Found mpi.h in /usr/include/mpp"
         MPI_INCLUDE=/usr/include/mpp
      elif [ -f /opt/ctl/mpt/mpt/include/mpi.h ] ; then
         echo "Found mpi.h in /opt/ctl/mpt/mpt/include"
         MPI_INCLUDE=/opt/ctl/mpt/mpt/include
      else
         echo "Can't find mpi.h"
         echo -n "Enter path to mpi.h: "
         read mincpath
         MPI_INCLUDE=$mincpath
      fi
      if [ -f /mpp/lib/libmpi.a ]; then
         echo "Found libmpi.a in /mpp/lib"
         MPI_LIB=/mpp/lib
      elif [ -f /opt/ctl/mpt/mpt/lib/libmpi.a ] ; then
         echo "Found libmpi.a in /opt/ctl/mpt/mpt/lib"
         MPI_LIB=/opt/ctl/mpt/mpt/lib
      else
         echo "Can't find libmpi.a"
         echo -n "Enter path to libmpi.a: "
         read mlibpath
         MPI_LIB=$mlibpath
      fi      
   elif [ $ISIS_ARCH = meiko ]; then
      if [ -f /opt/ANL/mpi/include/mpi.h ]; then
	 echo "Found mpi.h in /opt/ANL/mpi/include"
         MPI_INCLUDE="/opt/ANL/mpi/include -I/opt/meiko/include"
         MPI_LIB=/opt/ANL/mpi/lib/meiko/meiko
      else
         echo "Can't find MPI..."
         echo -n "Enter path to mpi.h: "
         read mincpath
         MPI_INCLUDE=$mincpath
         echo -n "Enter path to libmpi.a: "
         read mlibpath
         MPI_LIB=$mlibpath
      fi
   elif [ -f /opt/intel/tflop/current/tflops/cougar/include/mpi.h ] ; then
      echo "Found mpi.h in /opt/intel/tflop/current/tflops/cougar/include"
      MPI_INCLUDE=/opt/intel/tflop/current/tflops/cougar/include
      MPI_LIB=/opt/intel/tflop/current/tflops/cougar/lib
   else
      if [ -f /usr/local/mpi/include/mpi.h ]; then
         echo "Found mpi.h in /usr/local/mpi/include"
         MPI_INCLUDE=/usr/local/mpi/include
         MPI_LIB=/usr/local/mpi/lib/$ISIS_ARCH/ch_p4
         MPI_ROOT=/usr/local/mpi
      elif [ -f /usr/local/mpich/include/mpi.h ]; then
         echo "Found mpi.h in /usr/local/mpich/include"
         MPI_INCLUDE=/usr/local/mpich/include
         MPI_LIB=/usr/local/mpich/lib/$ISIS_ARCH/ch_p4
         MPI_ROOT=/usr/local/mpich
      else
         if [ $ISIS_ARCH != rs6000 ]; then
            echo "Can't find MPI..."
            echo -n "Enter path to mpi.h: "
            read mincpath
            MPI_INCLUDE=$mincpath
            echo -n "Enter path to libmpi.a: "
            read mlibpath
            MPI_LIB=$mlibpath
         fi
      fi
   fi
   if [ $crosscompiling = y ] ; then
      echo -n "Enter path to mpi.h: "
      read mincpath
      MPI_INCLUDE=$mincpath
      echo -n "Enter path to libmpi.a: "
      read mlibpath
      MPI_LIB=$mlibpath
   fi
   echo "MPI_INCLUDE=$MPI_INCLUDE"
   echo "MPI_INCLUDE=$MPI_INCLUDE" >> $outfile
   echo "MPI_LIB=$MPI_LIB"
   echo "MPI_LIB=$MPI_LIB" >> $outfile
   echo "MPI_ROOT=$MPI_ROOT"
   echo "MPI_ROOT=$MPI_ROOT" >> $shport
   echo "LDFLAGS=$LDFLAGS -L$MPI_LIB $AZTEC_LIB_PATH $SPARSKIT2_LIB_PATH $BPKIT_LIB_PATH $HYPRE_LIB_PATH" >> $outfile
else 
   MPI_INCLUDE=$FEI_ROOT/other
   echo "MPI_INCLUDE=$MPI_INCLUDE" >> $outfile
   echo "LDFLAGS=$LDFLAGS" >> $outfile
fi

echo "Library installation path (used by 'make install' only)"
echo -n '	[/usr/local]? : '
read installpath
echo  ""
if test -z "$installpath" 
then
	installpath=/usr/local
fi
echo "INSTALL_ROOT=$installpath"
echo "INSTALL_ROOT=$installpath" >> $outfile

if [ -d $installpath ] ; then
	echo -n ""
else
	echo '* * * Warning: installation path does not exist'
	echo '* * * Warning: Fix INSTALL_ROOT in make.options'
fi

# This takes care of some funny behaviors.
RL=ranlib
echo "C++INCLUDES=-I\$(FEI_ROOT) -I\$(ISIS_ROOT)" >> $outfile
if [ $ISIS_ARCH = IRIX ] ; then
	RL=echo
fi
if [ $ISIS_ARCH = IRIX64 ] ; then
	RL=echo
fi

cat << _EOF_ >> $outfile

# std unixisms, we hope, that still need fixing sometimes
CP=/bin/cp
RM=/bin/rm
LN=/bin/ln
MKDIR=/bin/mkdir
CHMOD=chmod
RANLIB=$RL

# our dependency stuff for linux
DEPEND_CPP=g++
DEPEND_ALL=\$(FEI_ROOT)/util/g++depinclude
DEPEND_NOSYS=\$(FEI_ROOT)/util/g++depinclude_nosys
DEPEND_NONE=\$(FEI_ROOT)/util/g++nodepinclude
# DEPEND_FLAGS should be redefined in the applying makefile if needed
DEPEND_FLAGS=\$(CXXFLAGS) \$(C++INCLUDES) \$(C++DEFINES)
# misc stuff that'll probably need fixing on some platforms:
CXXFLAGS=\$(OPT) -c
CINCLUDES=\${CINCLUDES--I/usr/local/include}
_EOF_

echo " "
echo " "
echo "Makefile options complete, written to file 'make.options'."
echo " "
