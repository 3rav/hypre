Brief guide to the AMG options available through the FEI
========================================================


1. Options that can significantly affect the performance

amgStrongThreshold
   This option affects the measure of strong/weak connections.
   Default value: 0.25
   Other possible values: between 0.0 and 1.0
   Tips:
      - For problems with stretched elements or anisotropic coefficients,
        it is often beneficial to use larger values: 0.3, 0.5, 0.8, 0.9.
      - The larger the strength threshold, the more expensive each iteration
        is (and more memory is needed).

amgCoarsenType
   Defines the coarsening scheme used in AMG.
   Default value: "falgout"
   Other possible values: "pmis", "hmis", "cljp", "ruge", "ruge3c"
   Tips:
      - The default "falgout" coarsening is more expensive (and not scalable to large
        number of processors), but results in a more robust solver that can solve
        the problem in fewer conjugate gradient iterations.
      - Less expensive coarsening schemes are "hmis" and "pmis", which work best if
 	combined with interpolation schemes 6 or 7 (see amgInterpType) and truncation
	(see amgPmax).
      - Even less expensive coarsening can be obtained using aggressive coarsening
	(see amgAggLevels). Note that this may deteriorate convergence significantly.

amgAggLevels
   This option determines the number of levels where aggressive coarsening
   is used.
   Default value: 0 (no aggressive coarsening)
   Other possible values: 1, 2, ...
   Tips:
      - aggressive coarsening will result in reduced memory usage and faster iterations,
	but will deteriorate convergence. It is best used with "hmis" coarsening,
	amgInterpType 6 and Pmax 4 or 5.

amgInterpType
   This option determines the interpolation operator.
   Default value: 0
   Other possible values: 6, 7
   Tips:
      - Interpolation types 6 and 7 identify long-range interpolation, which
        are more expensive, but usually produces faster overall convergence.
      - To control the complexity, combine this with truncation (see amgPmax
        options below).

amgPmax
   This option truncates the AMG interpolation operator.
   Default value: 0 (no truncation)
   Other possible values: 4, 5, ...
   Tips:
      - Use with long-range interpolation.
      - Larger values lead to greater complexity and potentially improved
        convergence.

amgRelaxType
   Defines the smoother used within AMG.
   Default value: "hybrid"
   Other possible values: "hybridsym", "jacobi", "CFjacobi", "CFhybrid",
	"CFhybridsym"
   Tips:
      - The "hybrid" smoother is not symmetric, so it may lead to a diverging
        behavior in conjugate gradient (CG). For use with CG it is therefore
	recommended to use "hybridsym" (or "jacobi"). Usually "jacobi" converges
	not as well as "hybridsym" and often requires a suitable weight (see
	amgRelaxWeight)
      - The CF-smoothers are smoothing first the coarse then the fine points
	and can lead to better convergence, however one CF-sweep is more
	expensive than a regular sweep. CF-smoothing can be very effective
	when applied to Jacobi.

amgNumSweeps
   Number of smoothing steps.
   Default value: 1
   Other possible values: 2, 3, ...
   Tips:
      - increasing the number of sweeps usually improves convergence, but also
	increases the time per iteration, so this is only recommended when
	convergence is significantly improved.

2. Additional options

amgRelaxOmega
   This is the outer relaxation weight for the hybridsym smoother
   Default value: 1.0
   Other possible values: between 0.0 and 2.0
   Tips:
      - This parameter can improve performance for some problems when running
	parallel jobs. An optimal parameter will depend on the maximal
	eigenvalue of the iteration matrix. Often a parameter smaller than 1
	is recommended.
      - Can be set to -n, in which case it will compute an estimate of a weight
	on each AMG level using n iterations of conjugate gradient. This will
	increase setup time, but can in some cases improve convergence or
	prevent divergence.

amgRelaxWeight
   Damping coefficient for the Jacobi smoother or weight for SOR ("hybrid")
	or SSOR ("hybridsym")
   Default value: 1.0
   Other possible values: for Jacobi between 0.0 and 1.0, for SOR between 0.0
	and 2.0.
   Tips:
      - This parameter can be very important to achieve convergence for use
	with Jacobi. Theoretically good weights depend on the maximal eigenvalue
	of the iteration matrix.
      - Can be set to -n for Jacobi or hybridsym, in which case it will compute
	an estimate of a weight on each AMG level using n iterations of
	conjugate gradient. This will increase setup time, but can in some
	cases improve convergence or prevent divergence.

amgSystemSize
    Uses the systems version of AMG when trying to solve a linear system that
	is derived from a system of PDEs. amgSystemSize needs to be set to the
	number of functions of the system of PDEs (often 1, 2 or 3)
    Tip:
      - This expects the variables of the linear system to be ordered according
	to the nodes of the grid, with each function represented at each node.

amgMaxIter
    Maximum number of AMG iterations (1 when used as a preconditioner).

amgMaxLevels
    Maximum number of AMG levels
    Default value: 30

amgSmoothType
    Defines more complex smoothers, such as Schwarz smoothers
    Default value: 0 (no complex smoother)
    Other Values: 6 for Schwarz or block smoothers

amgSmoothNumLevels
    Defines the number of levels where complex smoother is used
    Default value: 0
    Tip:
     - if using a block smoother for a problem generated from a
	system of PDEs (i.e amgSystemSize > 1), this should be
	set to 1 only, since the nodal structure is usually destroyed
	after the first level

amgSmoothNumSweeps
    Defines the number of sweeps of complex smoother

amgSchwarzVariant
    Defines variant of Schwarz smoother
    Default: 0 (hybrid multiplicative Schwarz smoother, no overlap across
	        processor boundaries)
    Other options:
      1 hybrid additive Schwarz smoother (no overlap across processor
	boundaries)
      2 additive Schwarz smoother
      3 hybrid multiplicate Schwarz smoother (with overlap across processor
		boundaries)
    Tip:
      - Schwarz smoothers can be used as block smoothers in the case of
	a systems PDE, e.g. variant 0 (1) with Overlap 0 and domain type 1
	is a hybrid block SGS (Jacobi) smoother where each block corresponds
	to a node of the underlying grid

amgSchwarzOverlap
    Defines type of overlap for Schwarz smoother
    Default: 1 (minimal overlap)
    Other options:
      0 no overlap
      2 overlap includes all neighbors of domain boundaries
    Tip:
      - minimal overlap can achieve better convergence, but is also expensive,
	often no overlap can give better total times

amgSchwarzDomainType
    Defines type of domain for Schwarz smoother
    Default: 2 (domains are generated by agglomeration)
    Other options: 1 each node is a domain (only for amgSystemSize > 1)

amgSchwarzRelaxWt
    Sets Relaxation Weight for hybrid Schwarz or block Smoother.
    Default: 1.0
    Tips:
      - This parameter can improve performance for some problems when running
	parallel jobs. An optimal parameter will depend on the maximal
	eigenvalue of the iteration matrix. Often a parameter smaller than 1
	is recommended.
      - Can be set to -n, in which case it will compute an estimate of a weight
	on each AMG level using n iterations of conjugate gradient. This will
	increase setup time, but can in some cases improve convergence or
	prevent divergence.
